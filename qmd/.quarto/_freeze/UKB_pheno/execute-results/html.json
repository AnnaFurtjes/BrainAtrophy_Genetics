{
  "hash": "207d0e4ea2411ae94959a9afda957c56",
  "result": {
    "markdown": "---\ntitle: \"UKB: Phenotypic data preparation\"\nformat: \n  html:\n    code-fold: true\nauthor: \"Anna Elisabeth Furtjes\"\ndate: \"04 November 2024\"\noutput: html\ndoi: test\n---\n\n\n------------------------------------------------------------------------\n\n\n\n\n\n\nData prepared here was used as input into analyses presented [here](pheno_assocs.html). The file containing all  phenotypic variables was named `UKB_allPheno.txt`.\n\n## Load packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nlibrary(lavaan)\n```\n:::\n\n\n## Define function \n\nThe function `getFieldLoc` identifies the directory with the most recent UKB download. We have multiple files on the server from different downloads, and I want to be sure I use the most recent one (i.e., the one saved in a directory with the highest number).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# script that searches in our available data if we have a certain data field\ngetFieldLoc = function(path = path, fileName = fileName, fieldID = fieldID){\n  \n  # read all the field.ukb files\n  files_to_read = list.files(\n    path = path,\n    pattern = fileName,\n    recursive = T,\n    full.names = T\n  )\n  # read all files\n  dat = lapply(files_to_read, fread)\n  names(dat) = files_to_read\n  \n  # search for field ID of interest \n  candidates = names(dat)[grep(fieldID, dat)]\n  # figure out which one is from the most recent file (i.e., highest number)\n  candidates = str_remove(candidates, paste0(path, \"/\"))\n  candidates = str_remove(candidates, paste0(\"/\", fileName))\n  candidates = unique(as.numeric(sapply(str_extract_all(candidates, \"\\\\d+\"), tail , 1)))\n  most_recent = max(candidates, na.rm =T)\n  \n  return(paste0(path, most_recent))\n}\n```\n:::\n\n\n\n## Cognitive test (factor scores)\n\nInput data used here was kindly provided by Joanna Moodie who had modeled the g-factor for one of her previous projects. The factor was modeled on the whole UKB sample, and then restricted to the participants with available neuroimaging data. This was deemed appropriate because the variables remained normally distributed in the restricted sample. Modelling the factor in the full sample will hopefully mean that the factor was based on a more representative sample than relying on participants who returned for their second neuroimaigng visit (healthy selection bias).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### This script was adapted from Joanna Moodies script\nlibrary(lavaan)\n\n# read in the data\nUKBcog <- read.csv(\"/CCACE_Shared/Joanna/ForShare/UKB_g/UKB_cogtests.csv\", sep = \" \")\n# name ID column\nnames(UKBcog)[which(names(UKBcog) == \"ID\")] = \"f.eid\"\n\n# re-formatting data\nUKBcog$cog_trailB_log[which(UKBcog$cog_trailB_log == 0)] <- NA\nUKBcog$cog_prosmem[which(UKBcog$cog_prosmem == 2)] <- 0\nUKBcog$cog_pairedAss <- exp(UKBcog$cog_pairedAss_log)\n\n#UKBcog <- merge(UKBcog, ' ', by = \"ID\") # select the participants you want in the sample\n\n# keep varibales of interest\nUKBcog = UKBcog[,c(\"f.eid\",\n\t\t\t\t\t\t\t\"cog_RT_log\",\n\t\t\t\t\t\t\t\"cog_numeric_memory\",\n\t\t\t\t\t\t\t\"cog_fluid_intelligence\",\n\t\t\t\t\t\t\t\"cog_trailB_log\",\n\t\t\t\t\t\t\t\"cog_matrix_pattern_correct\",\n\t\t\t\t\t\t\t\"cog_tower\",\n\t\t\t\t\t\t\t\"cog_digsym\",\n\t\t\t\t\t\t\t\"cog_pairedAss\",\n\t\t\t\t\t\t\t\"cog_prosmem\",\n\t\t\t\t\t\t\t\"cog_pairsmatch_incorrect_log\")]\n\n# define general factor model\ncogmodel <- 'g =~  cog_RT_log +\n\t\t\t\t\tcog_numeric_memory + \n\t\t\t\t\tcog_fluid_intelligence + \n\t\t\t\t\tcog_trailB_log + \n\t\t\t\t\tcog_matrix_pattern_correct + \n\t\t\t\t\tcog_tower + \n\t\t\t\t\tcog_digsym + \n\t\t\t\t\tcog_pairsmatch_incorrect_log +\n\t\t\t\t\tcog_prosmem +\n\t\t\t\t\tcog_pairedAss\n\t\t\t\t\t'\n\n# fit general factor model\nfit = cfa(cogmodel, data = UKBcog, missing=\"ML\")\nsummary(fit, fit.measures=TRUE, standardized=T)\n\n# save fit for later\nsave(fit, file = paste0(out,\"/fit.RData\"))\n\n# predict individual-level factor scores \ngPheno <- lavPredict(fit, UKBcog)\ngPheno <- as.data.frame(cbind(UKBcog$f.eid, gPheno))\n\n# re-name columns\nnames(gPheno) = c(\"f.eid\",\"g\")\n\n# hist(gPheno$g)\n\n# standardise\ngPheno$gStand = scale(gPheno$g)\n\n# save in separate file \nwrite.table(gPheno[,c(\"f.eid\", \"gStand\")], file = paste0(out, \"/UKB_gFactor.txt\"), quote = F, col.names = T, row.names = F, sep = \"\\t\")\n```\n:::\n\n\n\n## Dementia status\n\nNote that according to this definition only 5 participants a diagnosis, and the remaining ones are proxy cases.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## find items and where they are stored on the server\n## dementia is defined based on multiple sources of information we have in the UKV\n## 1. ICD-10 diagnoses: field ID 41270\n## 2. Self-reported illnesses (dementia, alzheimers, cognitive impairment): field ID 20002\n## 3. Source of all cause dementia report: field ID 42019\n## 4. Contributing causes of death: field ID 40001 & 40002\n## 5. Date F00 first reported: field ID 130836\n\n#############################################\n## 1. ICD-10 diagnoses: field ID 41270\n#############################################\n# determine file paths\npath1 = getFieldLoc(path = path, \n            fileName = \"fields.ukb\", \n            fieldID = 41270)\n\nfileID = list.files(pat=path1,pattern=\"csv\")\n# read in file\nfile = fread(paste0(path1, \"/\", fileID))\n# file doesnt like column names that start with number and it doesnt like -\nnames(file) = paste0(\"f.\",names(file))\n#names(file) = str_replace(names(file), pattern = \"-\", replacement = \"_\")\nnames(file) = gsub(\"-\", \"_\", names(file), fixed = T)\n\n# list columns of interest\nid=which(names(file) == \"f.eid\")\ndementCols = grep(\"f.41270\", names(file))\n\n# select columns of interest\ndement = as.data.frame(file[, c(..id, ..dementCols)])\n\n# format \"\" to be NA\nfor(i in names(dement)[grep(\"f.41270\", names(dement))]){\n  dement[which(dement[,i] == \"\"),i] = NA\n}\n# identify those who have fully missing data (ecxept their participant ID)\nallMissing = which(rowSums(!is.na(dement[,-which(names(dement) == \"f.eid\")])) == 0) \n# 55361\n\n# determine ICD codes of interest to find in field ID 41270\nICDcode=c(\"F00\",\"F000\",\"F001\",\"F002\",\"F009\",\"G30\",\"G300\",\"G301\",\"G308\",\"G309\",\"F01\",\"F010\",\"F011\",\"F012\",\"F013\",\"F018\",\"F019\",\"I673\",\"F03\",\"G311\",\"G318\")\n\n# match ICDcodes with entries in all f.41270 variables filtered in 'dement'\ndement$countCodes = rowSums(!is.na(sapply(dement[,-which(names(dement) == \"f.eid\")], match, ICDcode)))\n\n# if 1 or more entries, consisder a case\ndement$dementICD41270 = as.factor(ifelse(dement$countCodes >= 1, 1, 0))\n\n# delete those with missing IDs\ndement$dementICD41270[allMissing] = NA\n\n# save this variable to a seperate file\nfwrite(dement[,c(\"f.eid\", \"dementICD41270\")], file = paste0(out, \"/UKB_dement_ICD41270.txt\"), col.names = T, row.names = F, quote = F, na = NA, sep = \"\\t\")\n\n#############################################\n## 2. Self-reported illnesses (dementia, alzheimers, cognitive impairment, code = 1263): field ID 20002\n#############################################\nfileID = list.files(pat=path2,pattern=\"csv\")\n# read in file\nfile = fread(paste0(path2, \"/\", fileID))\n# file doesnt like column names that start with number and it doesnt like -\nnames(file) = paste0(\"f.\",names(file))\n#names(file) = str_replace(names(file), pattern = \"-\", replacement = \"_\")\nnames(file) = gsub(\"-\", \"_\", names(file), fixed = T)\n\n# list columns of interest\nid=which(names(file) == \"f.eid\")\ndementCols = grep(\"f.20002\", names(file))\n\n# select columns of interest\ndement = as.data.frame(file[, c(..id, ..dementCols)])\n\n# identify those who have fully missing data (except their participant ID)\nallMissing = which(rowSums(!is.na(dement[,-which(names(dement) == \"f.eid\")])) == 0) \n# 113066\n\n# determine code of interest to find in this field ID\ncode = \"1263\"\n\n# match ICDcodes with entries in all f.41270 variables filtered in 'dement'\ndement$countCodes = rowSums(!is.na(sapply(dement[,-which(names(dement) == \"f.eid\")], match,code)))\n\n# if 1 or more entries, consisder a case\ndement$dement20002 = as.factor(ifelse(dement$countCodes >= 1, 1, 0))\n\n# delete those with missing IDs\ndement$dement20002[allMissing] = NA\n\n# append final column to file\nfile$dement20002 = dement$dement20002\n\n#################################################\n## 3. Source of all cause dementia report: field ID 42019\n################################################\n# list columns of interest\nid=which(names(file) == \"f.eid\")\ndementCols = grep(\"f.42019\", names(file))\n\n# select columns of interest\ndement = as.data.frame(file[, c(..id, ..dementCols)])\n\n# only record whether participants have an entry, which is indicative of dementia\n# however the absence of a code does not mean they don't have dementia\ndement$dement42019 = as.factor(ifelse(!is.na(dement$f.42019_0.0), 1, NA))\n\n# append final column to file\nfile$dement42019 = dement$dement42019\n\n###################################################\n## 4. Contributing causes of death: field ID 40001 & 40002\n###################################################\n# list columns of interest\nid=which(names(file) == \"f.eid\")\ndementCols = c(grep(\"f.40001\", names(file)), grep(\"f.40002\", names(file)))\n\n# select columns of interest\ndement = as.data.frame(file[, c(..id, ..dementCols)])\n\n# format \"\" to be NA\nfor(i in names(dement)[c(grep(\"f.40001\", names(dement)), grep(\"f.40002\", names(dement)))]){\n  dement[which(dement[,i] == \"\"),i] = NA\n}\n\n# determine ICD codes of interest to find in field ID \nICDcode=c(\"F00\",\"F000\",\"F001\",\"F002\",\"F009\",\"G30\",\"G300\",\"G301\",\"G308\",\"G309\",\"F01\",\"F010\",\"F011\",\"F012\",\"F013\",\"F018\",\"F019\",\"I673\",\"F03\",\"G311\",\"G318\")\n\n# match ICDcodes with entries in all f.41270 variables filtered in 'dement'\ndement$countCodes = rowSums(!is.na(sapply(dement[,-which(names(dement) == \"f.eid\")], match, ICDcode)))\n\n# if 1 or more entries, consider a case\n# but if there is no entry, it probably more often means this person has not died yet, rather than that they had no dementia\ndement$dementDeath= as.factor(ifelse(dement$countCodes >= 1, 1, NA))\n\n# append final column to file\nfile$dementDeath = dement$dementDeath\n\n######################################\n## 5. Illnesses of father and mother (Alzheimer's disease/dementia; code = 10): field ID 20107 & 20110\n#####################################\n# list columns of interest\nid=which(names(file) == \"f.eid\")\ndementCols = c(grep(\"f.20107\", names(file)), grep(\"f.20110\", names(file)))\n\n# select columns of interest\ndement = as.data.frame(file[, c(..id, ..dementCols)])\n\n# remove all minus (-) values\ndement[dement <= 0] = NA\n\n# determine codes of interest to find in field ID \ncode=c(10)\n\n# match ICDcodes with entries in all f.41270 variables filtered in 'dement'\ndement$countCodes = rowSums(!is.na(sapply(dement[,-which(names(dement) == \"f.eid\")], match, code)))\n\n# if 1 or more entries, consider a case\n# this is a report on parents, so absence of entry does not mean they don't have dementia\ndement$dementParents = as.factor(ifelse(dement$countCodes >= 1, 1, NA))\n\n# append final column to file\nfile$dementParents = dement$dementParents\n\n\n################################################\n## 5. Date F00 first reported: field ID 130836\n###############################################\n# list columns of interest\nid=which(names(file) == \"f.eid\")\ndementCols = grep(\"f.130836\", names(file))\n\n# select columns of interest\ndement = as.data.frame(file[, c(..id, ..dementCols)])\n\n# store IDs for coded dates that suggest mistakes - however, doesnt contain any of the coded fields\n# which(dement$f.130836_0.0 == \"1901-01-01\")\n\n# record who has date \ndement$dement130836 = NA\ndement$dement130836[which(!is.na(dement$f.130836_0.0))] = 1\n\n# store in file\nfile$dement130836 = as.factor(dement$dement130836)\n\n################################################\n## Combine all data sources to one phenotype\n################################################\n# keep columns of interest\nfile = file[,c(\"f.eid\", \"dement20002\", \"dement42019\", \"dementDeath\",\"dementParents\",\"dement130836\")]\n\n# read in info from item 41270 (that was saved on a txt file - see (1.)) \nvar41270 = fread(paste0(out, \"/UKB_dement_ICD41270.txt\"), header = T)\nvar41270$dementICD41270 = as.factor(var41270$dementICD41270)\n\n# merge with info above\nfile = as.data.frame(merge(var41270, file, by = \"f.eid\"))\n\n# identify those with all missing\nallMissing = which(rowSums(!is.na(file[,-which(names(file) == \"f.eid\")])) == 0) \n\n# identify cases\nfile$dement = 0 \n\n# identify cases\nfile$dement[which(file$dement20002 == 1 |\n\t\t\t\tfile$dement42019 == 1 |\n\t\t\t\tfile$dementDeath == 1 |\n\t\t\t\tfile$dementParents == 1 |\n\t\t\t\tfile$dementICD41270 == 1 |\n\t\t\t\tfile$dement130836 == 1)] = 1\n\n\n# delete allMissing from controls\nfile$dement[allMissing] = NA\n\n# make factor\nfile$dement = as.factor(file$dement)\n\n#dementICD41270 dement20002   dement42019   dementDeath   dementParents  dement      \n#0   :442840    0   :389146   1   :  7896   1   :   860   1   : 66764   1   : 73835  \n#1   :  4156    1   :   156   NA's:494461   NA's:501497   NA's:435593   0\t: 409281\n#NA's: 55361    NA's:113055                              \t\t\t\tNA's: 19241\n\n# save final variable to a seperate file\nfwrite(file[,c(\"f.eid\", \"dement\")], file = paste0(out, \"/UKB_DementiaStatus.txt\"), col.names = T, row.names = F, quote = F, na = NA, sep = \"\\t\")\n```\n:::\n\n\n\n## APOE status\n\nFirst extract the two SNPs of interest using PLINK2.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# filter for the two APOE SNPs\nplink2 --bfile $loc/UKB500K_autosomes_X_XY_MAF_01_CLEAN_07052018_GD --snps rs7412,rs429358 --make-bed --freq --export A --out $temp/UKB_APOE\n```\n:::\n\n\nThen, model APOE status according to the approach used [here](https://www.thelancet.com/journals/ebiom/article/PIIS2352-3964(20)30330-3/fulltext#seccesectitle0014).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Determine whether someone has the e4 allele\n# read in data\ndat = read.table(paste0(temp, \"/UKB_APOE.raw\"), header = T)\n\n## simplify data\n# remove -IDs and remove redundant columns\ndat = dat[-which(dat$FID < 0),c(\"FID\", \"rs429358_T\", \"rs7412_C\")]\n\n# code variables to match look-up table\ndat$rs429358 = NA\ndat$rs429358[which(dat$rs429358_T == 2)] = \"TT\"\ndat$rs429358[which(dat$rs429358_T == 1)] = \"CT\"\ndat$rs429358[which(dat$rs429358_T == 0)] = \"CC\"\n\ndat$rs7412 = NA\ndat$rs7412[which(dat$rs7412_C == 2)] = \"CC\"\ndat$rs7412[which(dat$rs7412_C == 1)] = \"CT\"\ndat$rs7412[which(dat$rs7412_C == 0)] = \"TT\"\n\n# code variables according to combination of those genotypes\ndat$APOEgeno = NA\ndat$APOEgeno[which(dat$rs7412 == \"CC\" & dat$rs429358 == \"CC\")] = \"e4/e4\"\ndat$APOEgeno[which(dat$rs7412 == \"CC\" & dat$rs429358 == \"CT\")] = \"e3/e4\"\ndat$APOEgeno[which(dat$rs7412 == \"CT\" & dat$rs429358 == \"CT\")] = \"e2/e4\"\ndat$APOEgeno[which(dat$rs7412 == \"CC\" & dat$rs429358 == \"TT\")] = \"e3/e3\"\ndat$APOEgeno[which(dat$rs7412 == \"CT\" & dat$rs429358 == \"TT\")] = \"e2/e3\"\ndat$APOEgeno[which(dat$rs7412 == \"TT\" & dat$rs429358 == \"TT\")] = \"e2/e2\"\ndat$APOEgeno[which(dat$rs7412 == \"CT\" & dat$rs429358 == \"CC\")] = \"e1/e4\"\ndat$APOEgeno[which(dat$rs7412 == \"TT\" & dat$rs429358 == \"CT\")] = \"e1/e2\"\n\n\n# infer APOE status\ndat$APOEstatus = NA\ndat$APOEstatus[which(dat$APOEgeno == \"e4/e4\" | dat$APOEgeno == \"e3/e4\" | dat$APOEgeno == \"e2/e4\" | dat$APOEgeno == \"e1/e4\")] = \"e4Allele\"\ndat$APOEstatus[which(dat$APOEgeno == \"e3/e3\" | dat$APOEgeno == \"e2/e3\" | dat$APOEgeno == \"e2/e2\" | dat$APOEgeno == \"e1/e2\")] = \"NOe4Allele\"\n\ntable(dat$APOEstatus, dat$APOEgeno)\n\n#              e1/e2  e1/e4  e2/e2  e2/e3  e2/e4  e3/e3  e3/e4  e4/e4\n#  e4Allele        0     13      0      0   8818      0  82089   8266\n#  NOe4Allele      2      0   1984  42269      0 199277      0      0\n\n\n# keep only 2 columns\ndat = dat[,c(\"FID\", \"APOEgeno\", \"APOEstatus\")]\n\nwrite.table(dat, paste0(save, \"/UKB_APOE_Nov2023.txt\"), quote = F, col.names = T, row.names = F, sep = \"\\t\")\n```\n:::\n\n\n\n## Type 2 diabetes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## dementia is defined based on multiple sources of information we have in the UKB\n## 1. Self-reported illness (field ID 20002) & self-reported diagnosis by doctor (2443)\n## 2. ICD9 diagnoses (field ID 41203 & 41205)\n## 3. ICD10 diagnoses (field ID 41202 & 41204)\n## 4. Cause of death (field ID 40001)\n\n#########################################\n## 1. Self-reported illness (field IDs 20002, 2443, 2986, 2976, 21003) \n#########################################\nfileID = list.files(pat=path,pattern=\"csv\")\n# read in file\nfile = fread(paste0(path, \"/\", fileID))\n# file doesnt like column names that start with number and it doesnt like -\nnames(file) = paste0(\"f.\",names(file))\nnames(file) = gsub(\"-\", \"_\", names(file), fixed = T)\n\n\n#### field ID 20002\n####################\n\n# list columns of interest\nid=which(names(file) == \"f.eid\")\nCols = grep(\"f.20002\", names(file))\n\n# select columns of interest\nt2d = as.data.frame(file[, c(..id, ..Cols)])\n\n# identify those who have fully missing data (ecxept their participant ID)\nallMissing = which(rowSums(!is.na(t2d[,-which(names(t2d) == \"f.eid\")])) == 0) \n# 113066\n\n# determine codes of interest to find in field ID 41270\nt2d_codes <- c(\"1233\",\"1220\")\n\n# match ICDcodes with entries in all f.20002 variables filtered in 't2d'\nt2d$countCodes = rowSums(!is.na(sapply(t2d[,-which(names(t2d) == \"f.eid\")], match, t2d_codes)))\n\n# if 1 or more entries, consider a case\nt2d$t2d20002 = as.factor(ifelse(t2d$countCodes >= 1, 1, 0))\n\n# delete those with missing IDs\nt2d$t2d20002[allMissing] = NA\n\n# append final column to file\nfile$t2d20002 = t2d$t2d20002\n\n#### field 2443\n#### diabetes self-report interview touchscreen \n#################################\n# list columns of interest\nid=which(names(file) == \"f.eid\")\nCols = grep(\"f.2443\", names(file))\n\n# select columns of interest\nt2d = as.data.frame(file[, c(..id, ..Cols)])\n\n# remove all minus (-) values as they stand for \"do not know\" or \"Prefer not to answer\"\nt2d[t2d < 0] = NA\n\n# identify those who have fully missing data (ecxept their participant ID)\nallMissing = which(rowSums(!is.na(t2d[,-which(names(t2d) == \"f.eid\")])) == 0) \n\n# determine codes of interest to find in field \ndiab_code <- \"1\"\n\n# match codes with entries in all variables filtered in 't2d'\nt2d$countCodes = rowSums(!is.na(sapply(t2d[,-which(names(t2d) == \"f.eid\")], match, diab_code)))\n\n# if 1 or more entries, consider a case\nt2d$t2d2443 = as.factor(ifelse(t2d$countCodes >= 1, 1, 0))\n\n# delete those with missing IDs\nt2d$t2d2443[allMissing] = NA\n\n# append final column to file\nfile$t2d2443 = t2d$t2d2443\n\n##################################################\n## 4. Cause of death (field ID 40001)\n##################################################\n# list columns of interest\nid=which(names(file) == \"f.eid\")\nCols = grep(\"f.40001\", names(file))\n\n# select columns of interest\nt2d = as.data.frame(file[, c(..id, ..Cols)])\n\n# format \"\" to be NA\nfor(i in names(t2d)[grep(\"f.40001\", names(t2d))]){\n  t2d[which(t2d[,i] == \"\"),i] = NA\n}\n\n# identify those who have fully missing data (ecxept their participant ID)\nallMissing = which(rowSums(!is.na(t2d[,-which(names(t2d) == \"f.eid\")])) == 0) \n\n# determine ICD10 codes of interest to find in field \ndiab_code <- c(\"E110\",\"E111\",\"E112\",\"E113\",\"E114\",\"E115\",\"E116\",\"E117\",\"E118\",\"E119\")\n\n# match codes with entries in all variables filtered in 't2d'\nt2d$countCodes = rowSums(!is.na(sapply(t2d[,-which(names(t2d) == \"f.eid\")], match, diab_code)))\n\n# if 1 or more entries, consider a case\nt2d$t2dDeath = as.factor(ifelse(t2d$countCodes >= 1, 1, 0))\n\n# delete those with missing IDs\nt2d$t2dDeath[allMissing] = NA\n\n# append final column to file\nfile$t2dDeath = t2d$t2dDeath\n\n# intermediate save data \nsave = file[,c(\"f.eid\", \"t2d20002\", \"t2d2443\", \"t2dDeath\")]\n\n############################################\n## 2. ICD10 diagnoses (field ID 41202 & 41204)\n############################################\n### read in new data; basket 675090 has newer data for these variables \n\nfileID = list.files(pat=path,pattern=\"csv\")\n# read in file\nfile = fread(paste0(path, \"/\", fileID))\n# file doesnt like column names that start with number and it doesnt like -\nnames(file) = paste0(\"f.\",names(file))\nnames(file) = gsub(\"-\", \"_\", names(file), fixed = T)\n\n# list columns of interest\nid=which(names(file) == \"f.eid\")\nCols = c(grep(\"f.41202\", names(file)), grep(\"f.41204\", names(file)))\n\n# select columns of interest\nt2d = as.data.frame(file[, c(..id, ..Cols)])\n\n# format \"\" to be NA\nfor(i in names(t2d)[c(grep(\"f.41202\", names(t2d)), grep(\"f.41204\", names(t2d)))]){\n  t2d[which(t2d[,i] == \"\"),i] = NA\n}\n\n# identify those who have fully missing data (ecxept their participant ID)\nallMissing = which(rowSums(!is.na(t2d[,-which(names(t2d) == \"f.eid\")])) == 0) \n\n# determine ICD10 codes of interest to find in field \ndiab_code <- c(\"E110\",\"E111\",\"E112\",\"E113\",\"E114\",\"E115\",\"E116\",\"E117\",\"E118\",\"E119\")\n\n# match codes with entries in all variables filtered in 't2d'\nt2d$countCodes = rowSums(!is.na(sapply(t2d[,-which(names(t2d) == \"f.eid\")], match, diab_code)))\n\n# if 1 or more entries, consider a case\nt2d$t2dICD41202_4 = as.factor(ifelse(t2d$countCodes >= 1, 1, 0))\n\n# delete those with missing IDs\nt2d$t2dICD41202_4[allMissing] = NA\n\n# append final column to file\nfile$t2dICD41202_4 = t2d$t2dICD41202_4\n\n\n##################################################\n## 3. ICD9 diagnoses (field ID 41203 & 41205)\n##################################################\n# list columns of interest\nid=which(names(file) == \"f.eid\")\nCols = c(grep(\"f.41203\", names(file)), grep(\"f.41205\", names(file)))\n\n# select columns of interest\nt2d = as.data.frame(file[, c(..id, ..Cols)])\n\n# format \"\" to be NA\nfor(i in names(t2d)[c(grep(\"f.41203\", names(t2d)), grep(\"f.41205\", names(t2d)))]){\n  t2d[which(t2d[,i] == \"\"),i] = NA\n}\n\n# identify those who have fully missing data (ecxept their participant ID)\nallMissing = which(rowSums(!is.na(t2d[,-which(names(t2d) == \"f.eid\")])) == 0) \n\n# determine ICD10 codes of interest to find in field \ndiab_code <- c(\"25000\",\"25010\",\"25020\",\"25090\")\n\n# match codes with entries in all variables filtered in 't2d'\nt2d$countCodes = rowSums(!is.na(sapply(t2d[,-which(names(t2d) == \"f.eid\")], match, diab_code)))\n\n# if 1 or more entries, consider a case\nt2d$t2dICD41203_5 = as.factor(ifelse(t2d$countCodes >= 1, 1, 0))\n\n# delete those with missing IDs\nt2d$t2dICD41203_5[allMissing] = NA\n\n# append final column to file\nfile$t2dICD41203_5 = t2d$t2dICD41203_5\n\n\n######################################\n## Combine all t2d\n######################################\n# merge with saved columns above\nfile = merge(file, save, by = \"f.eid\")\n\n# keep columns of interest only\nfile = as.data.frame(file[, c(\"f.eid\", \"t2d20002\", \"t2d2443\", \"t2dICD41202_4\", \"t2dICD41203_5\", \"t2dDeath\")])\n\n# identify those with all missing\nallMissing = which(rowSums(!is.na(file[,-which(names(file) == \"f.eid\")])) == 0) \n\n# identify cases\nfile$t2d = 0 \n\n# identify cases\nfile$t2d[which(file$t2d20002 == 1 |\n\t\t\t\tfile$t2d2443 == 1 |\n\t\t\t\tfile$t2dICD41202_4 == 1 |\n\t\t\t\tfile$t2dICD41203_5 == 1 |\n\t\t\t\tfile$t2dDeath == 1)] = 1\n\n# delete allMissing from controls\nfile$t2d[allMissing] = NA\n\n# make factor\nfile$t2d = as.factor(file$t2d)\n\n#     0      1 \n# 451786  50436\n\n# save final variable to a seperate file\nfwrite(file[,c(\"f.eid\", \"t2d\")], file = paste0(out, \"/UKB_t2dStatus.txt\"), col.names = T, row.names = F, quote = F, na = NA, sep = \"\\t\")\n```\n:::\n\n\n## Hypertension \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hypertension is defined based on multiple field IDs\n## 1. Self-reported illness (field ID 20002) & self-reported diagnosis by doctor (2443)\n## 2. ICD9 diagnoses (field ID 41203 & 41205)\n## 3. ICD10 diagnoses (field ID 41202 & 41204)\n## 4. Cause of death (field ID 40001)\n\n#########################################\n## 1. Self-reported illness (field IDs 20002, 2443, 2986, 2976, 21003) \n#########################################\nfileID = list.files(pat=path,pattern=\"csv\")\n# read in file\nfile = fread(paste0(path, \"/\", fileID))\n# file doesnt like column names that start with number and it doesnt like -\nnames(file) = paste0(\"f.\",names(file))\nnames(file) = gsub(\"-\", \"_\", names(file), fixed = T)\n\n#### field ID 20002\n####################\n# list columns of interest\nid = which(names(file) == \"f.eid\")\nCols = grep(\"f.20002\", names(file))\n\n# select columns of interest\nhyp = as.data.frame(file[, c(..id, ..Cols)])\n\n# identify those who have fully missing data (ecxept their participant ID)\nallMissing = which(rowSums(!is.na(hyp[,-which(names(hyp) == \"f.eid\")])) == 0) \n# 113066\n\n# determine codes of interest to find in field ID 41270\nhyp_codes <- c(\"1065\",\"1072\")\n\n# match ICDcodes with entries in all f.20002 variables filtered in 't2d'\nhyp$countCodes = rowSums(!is.na(sapply(hyp[,-which(names(hyp) == \"f.eid\")], match, hyp_codes)))\n\n# if 1 or more entries, consider a case\nhyp$hyp20002 = as.factor(ifelse(hyp$countCodes >= 1, 1, 0))\n\n# delete those with missing IDs\nhyp$hyp20002[allMissing] = NA\n\n# append final column to file\nfile$hyp20002 = hyp$hyp20002\n\n#### field 131287\n#### Source of report of I10 \n#################################\n# list columns of interest\nid=which(names(file) == \"f.eid\")\nCols = grep(\"f.131287\", names(file))\n\n# select columns of interest\nhyp = as.data.frame(file[, c(..id, ..Cols)])\n\n# identify those who have fully missing data (ecxept their participant ID)\nallMissing = which(is.na(hyp[,which(names(hyp) != \"f.eid\")])) \n\n# determine participants with non missing \nallPresent = which(!is.na(hyp[,which(names(hyp) != \"f.eid\")]))\n\n# consider non-missing a case\nhyp$hyp131287 = NA\nhyp$hyp131287[allPresent] = 1\n\n# append final column to file\nfile$hyp131287 = hyp$hyp131287\n\n##################################################\n## 4. Cause of death (field ID 40001)\n##################################################\n# list columns of interest\nid=which(names(file) == \"f.eid\")\nCols = grep(\"f.40001\", names(file))\n\n# select columns of interest\nhyp = as.data.frame(file[, c(..id, ..Cols)])\n\n# format \"\" to be NA\nfor(i in names(hyp)[grep(\"f.40001\", names(hyp))]){\n  hyp[which(hyp[,i] == \"\"),i] = NA\n}\n\n# identify those who have fully missing data (ecxept their participant ID)\nallMissing = which(rowSums(!is.na(hyp[,-which(names(hyp) == \"f.eid\")])) == 0) \n\n# determine ICD10 codes of interest to find in field \nhyp_code <- c(\"I10\")\n\n# match codes with entries in all variables filtered in 'hyp'\nhyp$countCodes = rowSums(!is.na(sapply(hyp[,-which(names(hyp) == \"f.eid\")], match, hyp_code)))\n\n# if 1 or more entries, consider a case\nhyp$hypDeath = as.factor(ifelse(hyp$countCodes >= 1, 1, 0))\n\n# delete those with missing IDs\nhyp$hypDeath[allMissing] = NA\n\n# append final column to file\nfile$hypDeath = hyp$hypDeath\n\n# intermediate save data \nsave = file[,c(\"f.eid\", \"hyp20002\", \"hyp131287\", \"hypDeath\")]\n\n############################################\n## 2. ICD10 diagnoses (field ID 41202 & 41204)\n############################################\n### read in new data; basket 675090 has newer data for these variables \n\nfileID = list.files(pat=path,pattern=\"csv\")\n# read in file\nfile = fread(paste0(path, \"/\", fileID))\n# file doesnt like column names that start with number and it doesnt like -\nnames(file) = paste0(\"f.\",names(file))\nnames(file) = gsub(\"-\", \"_\", names(file), fixed = T)\n\n# list columns of interest\nid=which(names(file) == \"f.eid\")\nCols = c(grep(\"f.41202\", names(file)), grep(\"f.41204\", names(file)))\n\n# select columns of interest\nhyp = as.data.frame(file[, c(..id, ..Cols)])\n\n# format \"\" to be NA\nfor(i in names(hyp)[c(grep(\"f.41202\", names(hyp)), grep(\"f.41204\", names(hyp)))]){\n  hyp[which(hyp[,i] == \"\"),i] = NA\n}\n\n# identify those who have fully missing data (ecxept their participant ID)\nallMissing = which(rowSums(!is.na(hyp[,-which(names(hyp) == \"f.eid\")])) == 0) \n\n# determine ICD10 codes of interest to find in field \nhyp_code <- c(\"I10\")\n\n# match codes with entries in all variables filtered in 't2d'\nhyp$countCodes = rowSums(!is.na(sapply(hyp[,-which(names(hyp) == \"f.eid\")], match, hyp_code)))\n\n# if 1 or more entries, consider a case\nhyp$hypICD41202_4 = as.factor(ifelse(hyp$countCodes >= 1, 1, 0))\n\n# delete those with missing IDs\nhyp$hypICD41202_4[allMissing] = NA\n\n# append final column to file\nfile$hypICD41202_4 = hyp$hypICD41202_4\n\n\n##################################################\n## 3. ICD9 diagnoses (field ID 41203 & 41205)\n##################################################\n# list columns of interest\nid=which(names(file) == \"f.eid\")\nCols = c(grep(\"f.41203\", names(file)), grep(\"f.41205\", names(file)))\n\n# select columns of interest\nhyp = as.data.frame(file[, c(..id, ..Cols)])\n\n# format \"\" to be NA\nfor(i in names(hyp)[c(grep(\"f.41203\", names(hyp)), grep(\"f.41205\", names(hyp)))]){\n  hyp[which(hyp[,i] == \"\"),i] = NA\n}\n\n# identify those who have fully missing data (ecxept their participant ID)\nallMissing = which(rowSums(!is.na(hyp[,-which(names(hyp) == \"f.eid\")])) == 0) \n\n# determine ICD10 codes of interest to find in field \nhyp_code <- c(\"401\",\"4010\",\"4011\",\"4019\")\n\n# match codes with entries in all variables filtered in 't2d'\nhyp$countCodes = rowSums(!is.na(sapply(hyp[,-which(names(hyp) == \"f.eid\")], match, hyp_code)))\n\n# if 1 or more entries, consider a case\nhyp$hypICD41203_5 = as.factor(ifelse(hyp$countCodes >= 1, 1, 0))\n\n# delete those with missing IDs\nhyp$hypICD41203_5[allMissing] = NA\n\n# append final column to file\nfile$hypICD41203_5 = hyp$hypICD41203_5\n\n\n######################################\n## Combine all hypertension variables \n######################################\n# merge with saved columns above\nfile = merge(file, save, by = \"f.eid\")\n\n# keep columns of interest only\nfile = as.data.frame(file[, c(\"f.eid\", \"hyp20002\", \"hyp131287\", \"hypDeath\", \"hypICD41202_4\", \"hypICD41203_5\")])\n\n# identify those with all missing\nallMissing = which(rowSums(!is.na(file[,-which(names(file) == \"f.eid\")])) == 0) \n\n# identify cases\nfile$hyp = 0 \n\n# identify cases\nfile$hyp[which(file$hyp20002 == 1 |\n\t\t\t\tfile$hyp131287 == 1 |\n\t\t\t\tfile$hypDeath == 1 |\n\t\t\t\tfile$hypICD41202_4 == 1 |\n\t\t\t\tfile$hypICD41203_5 == 1)] = 1\n\n\n# delete allMissing from controls\nfile$hyp[allMissing] = NA\n\n# make factor\nfile$hyp = as.factor(file$hyp)\n\n#     0      1 \n# 277454 204678 \n\n# save final variable to a seperate file\nfwrite(file[,c(\"f.eid\", \"hyp\")], file = paste0(out, \"/UKB_HypertensionStatus.txt\"), col.names = T, row.names = F, quote = F, na = NA, sep = \"\\t\")\n```\n:::\n\n\n## Smoking (packyears)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfileID = list.files(pat=path,pattern=\"csv\")\n# read in file\nfile = fread(paste0(path, \"/\", fileID))\n# file doesnt like column names that start with number and it doesnt like -\nnames(file) = paste0(\"f.\",names(file))\nnames(file) = gsub(\"-\", \"_\", names(file), fixed = T)\n\n# list columns of interest\nid=which(names(file) == \"f.eid\")\n# using instance at the time of initial neuroimaging visit\n# also keep \"ever smoked\" variable to determine zeros in data set\n# no need to consider variable f.20160_2.0 because when it's 0, it's also 0 in packyears \nCols = grep(\"f.20161_2.0\", names(file))\n\n# select columns of interest\nsmok = as.data.frame(file[, c(..id, ..Cols)])\n\n# rename var\nnames(smok)[which(names(smok) == \"f.20161_2.0\")] = \"packyears\"\n\n# save variable\nfwrite(smok[,c(\"f.eid\", \"packyears\")], file = paste0(out, \"/UKB_packyears.txt\"), col.names = T, row.names = F, quote = F, na = NA, sep = \"\\t\")\n```\n:::\n\n\n\n## Body mass index\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfileID = list.files(pat=path,pattern=\"csv\")\n# read in file\nfile = fread(paste0(path, \"/\", fileID))\n# file doesnt like column names that start with number and it doesnt like -\nnames(file) = paste0(\"f.\",names(file))\nnames(file) = gsub(\"-\", \"_\", names(file), fixed = T)\n\n# list columns of interest\nid = which(names(file) == \"f.eid\")\n# normal BMI item f.21001.0.0\n# impedance BMI item f.97777.0.0\nCols = c(grep(\"f.21001_2.0\", names(file)), grep(\"f.23104_2.0\", names(file)))\n\n# select columns of interest\nbmi = as.data.frame(file[, c(..id, ..Cols)])\n\n# Yaghootkar, 2016: “We excluded individuals with differences\n#>.4.56 SDs between impedance and normal BMI measures where both \n# variables were available\"\n\n## Calculate difference between f.21001.0.0 and f.23104.0.0 for each individual\nbmi$BMI_diff <- bmi$f.21001.0.0 - bmi$f.23104.0.0\n\n# Calculate mean and SD of the difference between f.21001.0.0 and f.23104.0.0\nmean_diff <- mean(bmi$BMI_diff,na.rm=T)\nSD_diff <- sd(bmi$BMI_diff,na.rm=T)\n\n# Calculate the mean of BMI measures for each individual\nbmi$bmi <- rowMeans(bmi[, c(\"f.21001_2.0\", \"f.23104_2.0\")], na.rm = T)\n\n# Set BMI_mean to NA for individuals with BMI_diff ±4.56 SD from the mean\nbmi$bmi[which(bmi$BMI_diff < mean_diff - (SD_diff*4.56) | bmi$BMI_diff > mean_diff + (SD_diff*4.56))]<-NA\n\n# save final variable to a seperate file\nfwrite(bmi[,c(\"f.eid\", \"bmi\")], file = paste0(out, \"/UKB_bmi.txt\"), col.names = T, row.names = F, quote = F, na = NA, sep = \"\\t\")\n```\n:::\n\n\n\n\n## Stroke \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# multiple field IDs used to identify stroke\n# 1. Self-reported illness: field ID 200002\n# 2. Cause of death: field ID 40001\n# 3. Source of stroke report: field ID 42007\n# 4. ICd9 diagnoses: field IDs 41203 & 41205\n# 5. ICD10 diagnoses: field IDs 41202 & 41206\n\n#########################################\n## 1. Self-reported illness (field IDs 20002, 2443, 2986, 2976, 21003) \n#########################################\npath=\"/UK_Biobank_New/Data/Raw_Data/1027_Refresh_Dec_2022/670476\"\nfileID = list.files(pat=path,pattern=\"csv\")\n# read in file\nfile = fread(paste0(path, \"/\", fileID))\n# file doesnt like column names that start with number and it doesnt like -\nnames(file) = paste0(\"f.\",names(file))\nnames(file) = gsub(\"-\", \"_\", names(file), fixed = T)\n\n\n#### field ID 20002 (code 1081 & 1583)\n####################\n\n# list columns of interest\nid = which(names(file) == \"f.eid\")\nCols = grep(\"f.20002\", names(file))\n\n# select columns of interest\nstro = as.data.frame(file[, c(..id, ..Cols)])\n\n# identify those who have fully missing data (ecxept their participant ID)\nallMissing = which(rowSums(!is.na(stro[,-which(names(stro) == \"f.eid\")])) == 0) \n# 113066\n\n# determine codes of interest to find in field ID 41270\ncodes <- c(1081,1086,1491,1583)\n\n# match ICDcodes with entries in all f.20002 variables filtered in 't2d'\nstro$countCodes = rowSums(!is.na(sapply(stro[,-which(names(stro) == \"f.eid\")], match, codes)))\n\n# if 1 or more entries, consider a case\nstro$stro20002 = as.factor(ifelse(stro$countCodes >= 1, 1, 0))\n\n# delete those with missing IDs\nstro$stro20002[allMissing] = NA\n\n# append final column to file\nfile$stro20002 = stro$stro20002\n\n#### field 42007\n#### Source of report of stroke\n#################################\n# list columns of interest\nid=which(names(file) == \"f.eid\")\nCols = grep(\"f.42007\", names(file))\n\n# select columns of interest\nstro = as.data.frame(file[, c(..id, ..Cols)])\n\n# identify those who have fully missing data (ecxept their participant ID)\nallMissing = which(rowSums(!is.na(stro[,-which(names(stro) == \"f.eid\")])) == 0) \n\n# determine participants with non missing - consider them cases\nallPresent = which(!is.na(stro[,which(names(stro) != \"f.eid\")]))\n\n# consider non-missing a case (but missing doesn't mean they don\nstro$stro42007 = 0\nstro$stro42007[allPresent] = 1\nstro$stro42007[allMissing] = NA\n\nstro$stro42007 = as.factor(stro$stro42007)\n\n# append final column to file\nfile$stro42007 = stro$stro42007\n\n############################################\n# 2. Cause of Death (field ID 40001)\n############################################\n# list columns of interest\nid=which(names(file) == \"f.eid\")\nCols = grep(\"f.40001\", names(file))\n\n# select columns of interest\nstro = as.data.frame(file[, c(..id, ..Cols)])\n\n# format \"\" to be NA\nfor(i in names(stro)[grep(\"f.40001\", names(stro))]){\n  stro[which(stro[,i] == \"\"),i] = NA\n}\n\n# identify those who have fully missing data (ecxept their participant ID)\nallMissing = which(rowSums(!is.na(stro[,-which(names(stro) == \"f.eid\")])) == 0) \n\n# determine ICD10 codes of interest to find in field \ncodes <- c(\"I600\",\"I601\",\"I602\",\"I603\",\"I604\",\"I605\",\"I606\",\"I607\",\"I608\",\"I609\",\"I61\",\"I610\",\"I611\",\"I612\",\"I613\",\"I614\",\"I615\",\"I616\",\"I618\",\"I619\",\"I63\",\"I630\",\"I631\",\"I632\",\"I633\",\"I634\",\"I635\",\"I636\",\"I638\",\"I639\",\"I64\")\n\n\n# match codes with entries in all variables filtered in 'hyp'\nstro$countCodes = rowSums(!is.na(sapply(stro[,-which(names(stro) == \"f.eid\")], match, codes)))\n\n# if 1 or more entries, consider a case\nstro$stroDeath = as.factor(ifelse(stro$countCodes >= 1, 1, 0))\n\n# delete those with missing IDs\nstro$stroDeath[allMissing] = NA\n\n# append final column to file\nfile$stroDeath = stro$stroDeath\n\n# intermediate save\nsave = file[,c(\"f.eid\", \"stro20002\", \"stro42007\", \"stroDeath\")]\n\n############################################\n## 2. ICD10 diagnoses (field ID 41202 & 41204)\n############################################\n### read in new data; basket 675090 has newer data for these variables \n\nfileID = list.files(pat=path,pattern=\"csv\")\n# read in file\nfile = fread(paste0(path, \"/\", fileID))\n# file doesnt like column names that start with number and it doesnt like -\nnames(file) = paste0(\"f.\",names(file))\nnames(file) = gsub(\"-\", \"_\", names(file), fixed = T)\n\n# list columns of interest\nid=which(names(file) == \"f.eid\")\nCols = c(grep(\"f.41202\", names(file)), grep(\"f.41204\", names(file)))\n\n# select columns of interest\nstro = as.data.frame(file[, c(..id, ..Cols)])\n\n# format \"\" to be NA\nfor(i in names(stro)[c(grep(\"f.41202\", names(stro)), grep(\"f.41204\", names(stro)))]){\n  stro[which(stro[,i] == \"\"),i] = NA\n}\n\n# identify those who have fully missing data (ecxept their participant ID)\nallMissing = which(rowSums(!is.na(stro[,-which(names(stro) == \"f.eid\")])) == 0) \n\n# determine ICD10 codes of interest to find in field \nICDcode <- c(\"I600\",\"I601\",\"I602\",\"I603\",\"I604\",\"I605\",\"I606\",\"I607\",\"I608\",\"I609\",\"I61\",\"I610\",\"I611\",\"I612\",\"I613\",\"I614\",\"I615\",\"I616\",\"I618\",\"I619\",\"I63\",\"I630\",\"I631\",\"I632\",\"I633\",\"I634\",\"I635\",\"I636\",\"I638\",\"I639\",\"I64\")\n\n# match codes with entries in all variables filtered in 't2d'\nstro$countCodes = rowSums(!is.na(sapply(stro[,-which(names(stro) == \"f.eid\")], match, ICDcode)))\n\n# if 1 or more entries, consider a case\nstro$stroICD41202_4 = as.factor(ifelse(stro$countCodes >= 1, 1, 0))\n\n# delete those with missing IDs\nstro$stroICD41202_4[allMissing] = NA\n\n# append final column to file\nfile$stroICD41202_4 = stro$stroICD41202_4\n\n\n##################################################\n## 3. ICD9 diagnoses (field ID 41203 & 41205)\n##################################################\n# list columns of interest\nid=which(names(file) == \"f.eid\")\nCols = c(grep(\"f.41203\", names(file)), grep(\"f.41205\", names(file)))\n\n# select columns of interest\nstro = as.data.frame(file[, c(..id, ..Cols)])\n\n# format \"\" to be NA\nfor(i in names(stro)[c(grep(\"f.41203\", names(stro)), grep(\"f.41205\", names(stro)))]){\n  stro[which(stro[,i] == \"\"),i] = NA\n}\n\n# identify those who have fully missing data (ecxept their participant ID)\nallMissing = which(rowSums(!is.na(stro[,-which(names(stro) == \"f.eid\")])) == 0) \n\n# determine ICD10 codes of interest to find in field \ncodes <- c(\"4309\",\"4319\",\"4340\",\"4341\",\"4349\",\"4369\")\n\n# match codes with entries in all variables filtered in 't2d'\nstro$countCodes = rowSums(!is.na(sapply(stro[,-which(names(stro) == \"f.eid\")], match, codes)))\n\n# if 1 or more entries, consider a case\nstro$stroICD41203_5 = as.factor(ifelse(stro$countCodes >= 1, 1, 0))\n\n# delete those with missing IDs\nstro$stroICD41203_5[allMissing] = NA\n\n# append final column to file\nfile$stroICD41203_5 = stro$stroICD41203_5\n\n\n######################################\n## Combine all hypertension variables \n######################################\n\n# merge with saved columns above\nfile = merge(file, save, by = \"f.eid\")\n\n# keep columns of interest only\nfile = as.data.frame(file[, c(\"f.eid\", \"stro20002\", \"stro42007\", \"stroDeath\", \"stroICD41202_4\", \"stroICD41203_5\")])\n\n# identify those with all missing\nallMissing = which(rowSums(!is.na(file[,-which(names(file) == \"f.eid\")])) == 0) \n\n# identify cases\nfile$stroke = 0 \n\n# identify cases\nfile$stroke[which(file$stro20002 == 1 |\n\t\t\t\tfile$stro42007 == 1 |\n\t\t\t\tfile$stroDeath == 1 |\n\t\t\t\tfile$stroICD41202_4 == 1 |\n\t\t\t\tfile$stroICD41203_5 == 1)] = 1\n\n\n# delete allMissing from controls\nfile$stroke[allMissing] = NA\n\n# make factor\nfile$stroke = as.factor(file$stroke)\n\n#     0      1 \n# 461708  20197 \n\n# save final variable to a seperate file\nfwrite(file[,c(\"f.eid\", \"stroke\")], file = paste0(out, \"/UKB_StrokeStatus.txt\"), col.names = T, row.names = F, quote = F, na = NA, sep = \"\\t\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#### test overlap with neuroimaging sample\n# read in file that holds neuroimaging IDs\nIDfile= list.files(path = path, pattern = \"AllAvailLong\")\n\nallNeuro = read.table(paste0(path, IDfile))\nnames(allNeuro)[1] = \"f.eid\"\n\n# read in data\nstroke = fread(paste0(out, \"/UKB_StrokeStatus.txt\"))\n\n# merge with data\nstroke = merge(stroke, allNeuro, by = \"f.eid\", all.y=T)\n\ntable(stroke$stroke)\n```\n:::\n\n\n\n## Fried frailty definition\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Fried fraitly definition\n# Weight loss: 2306\n# Exhaustion: 2080\n# Weakness: 46,47\n# Physical activity: 6164, 1011\nfileID = list.files(pat=path,pattern=\"csv\")\n# read in file\nfile = fread(paste0(path, \"/\", fileID))\n# R doesnt like column names that start with number and it doesnt like -\nnames(file) = paste0(\"f.\",names(file))\nnames(file) = gsub(\"-\", \"_\", names(file), fixed = T)\n\n# Weight loss: 2306 (neuroimaging visit)\n# Coding\n# -3 = Prefer not to say (NA)\n# -1 = Do not know (0)\n# 0 = no weight loss (0)\n# 2 = gained weight (0)\n# 3 = lost weight (1)\nid = which(names(file) == \"f.eid\")\nCols = grep(\"2306_2.\", names(file))\n\nsub = as.data.frame(file[, c(..id, ..Cols)])\n\n# assign categories as in Jiang et al \nsub$f.2306_2.0[which(sub$f.2306_2.0 == -3)] = NA\nsub$f.2306_2.0[which(sub$f.2306_2.0 == -1)] = 0\nsub$f.2306_2.0[which(sub$f.2306_2.0 == 0)] = 0\nsub$f.2306_2.0[which(sub$f.2306_2.0 == 2)] = 0\nsub$f.2306_2.0[which(sub$f.2306_2.0 == 3)] = 1\n\n# intermediate save\nfile$weightLoss = sub$f.2306_2.0\n\n# Exhaustion: 2080\n# Coding in Jiang et al\n# -3 = Prefer not to answer (NA)\n# -1 = Don't know (0)\n# 1 = Not at all (0)\n# 2 = Several days (0)\n# 3 = More than half the days (1)\n# 4 = Nearly every day (1)\nid = which(names(file) == \"f.eid\")\nCols = grep(\"f.2080_2.\", names(file))\n\nsub = as.data.frame(file[, c(..id, ..Cols)])\n\n# assign categories as in Jiang et al \nsub$f.2080_2.0[which(sub$f.2080_2.0 == -3)] = NA\nsub$f.2080_2.0[which(sub$f.2080_2.0 == -1)] = 0\nsub$f.2080_2.0[which(sub$f.2080_2.0 == 1)] = 0\nsub$f.2080_2.0[which(sub$f.2080_2.0 == 2)] = 0\nsub$f.2080_2.0[which(sub$f.2080_2.0 == 3)] = 1\nsub$f.2080_2.0[which(sub$f.2080_2.0 == 4)] = 1\n\n# intermediate save\nfile$exhaustion = sub$f.2080_2.0\n\n# Walking speed (924)\n# -7 = None of the above (NA)\n# -3 = Prefer not to answer (NA)\n# 1 = Slow pace (1)\n# 2 = Steady average pace (0)\n# 3 = Brisk pace (0)\nid = which(names(file) == \"f.eid\")\nCols = grep(\"f.924_2.\", names(file))\n\nsub = as.data.frame(file[, c(..id, ..Cols)])\n\n# assign categories as in Jiang et al \nsub$f.924_2.0[which(sub$f.924_2.0 == -7)] = NA\nsub$f.924_2.0[which(sub$f.924_2.0 == -3)] = NA\nsub$f.924_2.0[which(sub$f.924_2.0 == 1)] = 1\nsub$f.924_2.0[which(sub$f.924_2.0 == 2)] = 0\nsub$f.924_2.0[which(sub$f.924_2.0 == 3)] = 0\n\n# intermediate save\nfile$walkingSpeed = sub$f.924_2.0\n\n# Weakness (grip strength) field ID average of 46,47\n# Cut offs\n# Males: \n# BMI <= 24 & grip strength <=29\n# 24.1<=BMI<=28 & grip strength <= 30\n# BMI > 28 & grip strength <= 32\n# Females:\n# BMI <= 23 & grip <=17\n# 23.1<=BMI<=26 & grip <=17.3\n# 26.1<=BMI & grip <=18\n# BMI>29 & grip<=21\n\n# select columns\nid = which(names(file) == \"f.eid\")\nCols = c(grep(\"f.46_2.\", names(file)), grep(\"f.47_2.\", names(file)), grep(\"f.21001_2.0\", names(file)), grep(\"f.23104_2.0\", names(file)), grep(\"f.31_\", names(file)))\n# subset data\nsub = as.data.frame(file[, c(..id, ..Cols)])\n\n# get average bmi between two indepdendent measures\nsub$bmi <- rowMeans(sub[, c(\"f.21001_2.0\", \"f.23104_2.0\")], na.rm = T)\n\n# get average grip strength between left and right hand\nsub$grip <- rowMeans(sub[, c(\"f.46_2.0\", \"f.47_2.0\")], na.rm = T)\n\n# create new variable to hold weakness categories\nsub$weakness = 0\n\n# identify participants who have missing bmi and missing grip as we can't determine measures for them\nallMissing = which(rowSums(!is.na(sub[,c(\"bmi\", \"grip\")])) == 0) \n\n# assign categories\n## Males: field ID f.31 is 1 for male\nmales = subset(sub, f.31_0.0 == 1)\nmales$weakness[which(males$bmi <= 24 & males$grip <=29)] = 1\nmales$weakness[which(males$bmi >= 24.1 & males$bmi <= 28 & males$grip <= 30)] = 1\nmales$weakness[which(males$bmi > 28 & males$grip <=32)] = 1\n\n## Females: f.31 is 0 for female\nfemales = subset(sub, f.31_0.0 == 0)\nfemales$weakness[which(females$bmi <= 23  & females$grip <= 17)] = 1\nfemales$weakness[which(females$bmi >= 23.1 & females$bmi <= 26 & females$grip <= 17.3)] = 1\nfemales$weakness[which(females$bmi >= 26.1 & females$bmi <= 29 & females$grip <= 18)] = 1\nfemales$weakness[which(females$bmi > 29 & females$grip <= 21)] = 1\n\n# combine males and females into 1 dataset\nboth = rbind(males, females)\n\n# merge weakness variable back with other variables\nfile = merge(file, both[,c(\"f.eid\", \"weakness\")], by = \"f.eid\")\n\n# remove participants with all missing info\nfile$weakness[allMissing] = NA\n\n# Physical activity field ID average of 6164\n## 1 = Walking for pleasure (0)\n## 2 = Other exercises (0)\n## 3 = Strenuous sports (0)\n## 4 = Light DIY (0 = more than once per week, 1 = once per weeks or less)\n## 5 = Heavy DIY (0)\n## -7 = None of the above (1)\n## -3 = Prefer not to answer (NA) \n\n# Frequency of light DIY in the 4 weeks, 1011\n## 1 = Once in the last 4 weeks\n## 2 = 2-3 times in the last4 weeks\n## 3 = Once a week\n## 4 = 2-3 times a week\n## 5 = 4-5 times a week\n## 6 = every day\n## -1 = do not know \n## -3 = prefer not to answer \n\n# select columns\nid = which(names(file) == \"f.eid\")\nCols = c(grep(\"f.6164_2.\", names(file)), grep(\"f.1011_2\", names(file)))\n\nsub = as.data.frame(file[, c(..id, ..Cols)])\n\n# identify participants who have indicated 'none of the above' (assigned value: 1)\nNoPhysAct = which(sub$f.6164_2.0 == -7)\n\n# we also assign value 1 to people who indicate to do light DIY once per week or less\nNoPhysAct = c(NoPhysAct, which(sub$f.6164_2.0 == 4 & sub$f.1011_2.0 == 1 | sub$f.6164_2.0 == 4 & sub$f.1011_2.0 == 2 | sub$f.6164_2.0 == 4 & sub$f.1011_2.0 == 3))\n\n# identify participants with all missing data (assigned value: NAs)\nallMissing = which(rowSums(!is.na(sub[,grep(\"6164\", names(sub))])) == 0) \n\n# create variable where all participants have assigned value 0\nsub$physicalActiv = 0 \n\n# identify those with No Physical Activity\nsub$physicalActiv[NoPhysAct] = 1\n\n# identify those with all missing\nsub$physicalActiv[allMissing] = NA\n\n# temporary save\nfile$physicalActiv = sub$physicalActiv\n\n### get overall sumscore\nfrail = file[,c(\"f.eid\",\"weightLoss\", \"exhaustion\", \"walkingSpeed\", \"weakness\", \"physicalActiv\")]\nfrail$FriedFrailty = rowSums(frail[,c(\"weightLoss\", \"exhaustion\", \"walkingSpeed\", \"weakness\", \"physicalActiv\")], na.rm = F)\n# hist(frail$FriedFrailty)\n\n# save file \nfwrite(frail[,c(\"f.eid\", \"FriedFrailty\")], file = paste0(out, \"/UKB_FriedFrailty.txt\"), col.names = T, row.names = F, quote = F, na = NA, sep = \"\\t\")\n```\n:::\n\n\n## Brain Age\n\nBrain age was calculated with [brainageR v2](github.com/james-cole/brainageR) using the Docker file available on [GitHub](https://github.com/fprados/brainageR_dockerfile), which is performed on each individual NIFTI file and then saved in separate text files.\n  \n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo docker run --rm -it -v ${WD}:/data -w /data docker.io/library/brainimage:latest /bin/bash\n\nDAT=\"/data/temp\"\nIDinfo=\"/data/scripts/UKBlong\"\n\n# read in participant IDs\nall=$(cat ${IDinfo}/AllAvailIDs_UKB15112023.txt)\n\n# run brainageR\nfor i in $all\ndo\n\necho $i\n\n    if [ ! -f /data/data/UKB_BrainAge/${i}_brain_predicted.age.csv ]\n    then\n\n        brainageR -f ${DAT}/BrainAge/${i}_T1_orig_defaced.nii -o /data/data/UKB_BrainAge/${i}_brain_predicted.age.csv\n\n    fi\n\ndone\n```\n:::\n\n\n### Format individual-level data \n\nWe found that the average brain age predictions were ~15 years younger than chronological age, and this seems to be a consensus across other research groups who attempted to extract brain age from UKB neuroimaging data. To center brain age around zero, we deducted  the sample brain age mean value from each individual value before calculating the brain age gap, which should not affect the interindividual variability we're modeling.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# identify csv files saved in Brain Age processing directory\nfiles = list.files(path = target, pattern = \"_T1_brain_predicted.age.csv\")\nfiles = paste0(target, \"/\",files)\n\n# object to hold brain age info\nsave = data.frame()\n\n# cycle through all files and save info\nfor(i in files){\n  # read in file\n  file = read.csv(i, header = T)\n  \n  # store info in object \"save\"\n  save = rbind(save, file)\n  \n}\n\n# re-name File column to subject ID\nsave$File = stringr::str_remove(save$File, pattern = \"_T1_orig_defaced\")\n\n# re-name ID column\nnames(save)[which(names(save) == \"File\")] = \"f.eid\"\n\n# rename\nsave$f.eid = stringr::str_remove(save$f.eid, pattern = \"_orig_defaced\")\n\nwrite.table(save, file = \"/CCACE_Shared/Anna_F/BrainAtrophy/data/UKB_BrainAge_T1_orig_defaced.txt\", col.names = T, row.names = F, quote = F, sep = \"\\t\")\n```\n:::\n\n\n\n## Merge all UKB phenotypes into one file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#list.files(path = wd, pattern = \"UKB_\")\n# it makes it more straightforward to conduct the following analyses if I merge all phenotypes into one file\n# Step 1: Read all phenotypes in\n# Step 2: Merge them\n# Step 3: Save\n\n# cognitive ability\ncog = fread(paste0(wd, \"/UKB_gFactor.txt\"))\n# dementia\ndement = fread(paste0(wd, \"/UKB_DementiaStatus.txt\"))\ndement$dement = as.factor(dement$dement)\n# APOE\nAPOE = fread(paste0(wd, \"/UKB_APOE_Nov2023.txt\"))\nnames(APOE)[which(names(APOE) == \"FID\")] = \"f.eid\"\nAPOE = APOE[,c(\"f.eid\", \"APOEstatus\")]\nAPOE$APOEstatus[which(APOE$APOEstatus == \"e4Allele\")] = 1\nAPOE$APOEstatus[which(APOE$APOEstatus == \"NOe4Allele\")] = 0\nAPOE$APOEstatus = as.factor(APOE$APOEstatus)\n\n# Frailty\nfrail = fread(paste0(wd, \"/UKB_FriedFrailty.txt\"))\n# diabetes\ndiab = fread(paste0(wd, \"/UKB_t2dStatus.txt\"))\ndiab$t2d = as.factor(diab$t2d)\n# hyp\nhyp = fread(paste0(wd, \"/UKB_HypertensionStatus.txt\"))\nhyp$hyp = as.factor(hyp$hyp)\n# packyears\nsmok = fread(paste0(wd, \"/UKB_packyears.txt\"))\n# bmi\nbmi = fread(paste0(wd, \"/UKB_bmi.txt\"))\n# brain age\nBrainAge = fread(paste0(wd, \"/UKB_BrainAge_T1_orig_defaced.txt\"))\n## get brain age gap: chronological age minus brain predicted age \nage = fread(paste0(wd, \"/UKB_covarGWAS.txt\"))\nnames(age)[grepl(\"FID\", names(age))] <- \"f.eid\"\nBrainAge = merge(BrainAge, age[,c(\"f.eid\", \"age\")], by = \"f.eid\")\nBrainAge$chronAge <- BrainAge$age / 12\nBrainAge$BrainAgeGap <- BrainAge$chronAge - BrainAge$brain.predicted_age\n# deducting mean age to be centered around zero\nBrainAge$brainAge <- BrainAge$BrainAgeGap - mean(BrainAge$BrainAgeGap)\nBrainAge = BrainAge[,c(\"f.eid\", \"brainAge\")]\n\n# stroke\nstroke = fread(paste0(wd, \"/UKB_StrokeStatus.txt\"))\nstroke$stroke = as.factor(stroke$stroke)\n\n# merge data\nDatList = list(cog, dement, APOE, frail, diab, hyp, smok, bmi, stroke, BrainAge)\nUKB_merged = Reduce(function(x,y) merge(x, y, by = \"f.eid\", all = T), DatList)\n\n# restrict data set to neuroimaging participants \nIDfile= list.files(path = path, pattern = \"AllAvailLong\")\n\nallNeuro = read.table(paste0(path, IDfile))\nnames(allNeuro)[1] = \"f.eid\"\n\nUKB_merged = UKB_merged[UKB_merged$f.eid %in% allNeuro$f.eid,]\n\n# choose prettier names\nnames(UKB_merged) = c(\"f.eid\",\"cog\",\"dementia\",\"APOEe4\",\"frailty\",\"diabetes\",\"hypertension\",\"packyears\",\"BMI\",\"stroke\", \"brainAge\")\n\n# write\nfwrite(UKB_merged, file = paste0(out, \"/UKB_allPheno.txt\"), col.names = T, row.names = F, quote = F, na = NA, sep = \"\\t\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}