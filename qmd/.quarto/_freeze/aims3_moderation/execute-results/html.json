{
  "hash": "95c36f590f1e4cf10674122c164bdc15",
  "result": {
    "markdown": "---\ntitle: \"Pre-registered aims 3.1-3.3\"\nformat: \n  html:\n    code-fold: true\nauthor: \"Anna Elisabeth Furtjes\"\ndate: \"25 March 2025\"\noutput: html\ndoi: 10.1101/2024.11.06.622274\n---\n\n\n------------------------------------------------------------------------\n\nAnalyses presented here are only included for completeness, and should be interpreted with caution due to issues of multicollinearity. Those analyses were conceived as part of the pre-registration and are included in the supplementary materials of the paper.\n\n# Create functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAim3 = function(neuro = neuro,\n                    pheno = pheno,\n                    model1 = \"Ig ~ CSF\",\n                    model2 = \"Ig ~ CSF + ICV\",\n                    modelType = c(\"Linear\", \"Logistic\", \"hurdle\"),\n                    na.action = \"None\",\n                    Cohort = NA,\n                    Aim = NA){\n\n      # make sure only one model type was chosen\n      if(length(modelType) != 1){warning(\"You must choose exactly 1 model type/ technique!\"); break}\n\n      # select appropriate time points\n      #neuro = neuro[which(neuro$wave == neuroWave),]\n\t\t# edit 8/4/2023: the data has been separately saved from different waves so no need to subset\n\n      # identify ID variable shared between data sets\n      IDvar = names(neuro)[names(neuro) %in% names(pheno)]\n      if(length(IDvar) == 0){warning(\"The two input files cannot be merged because they don't have a shared column name!\"); break}\n\n      # identify variable of interest name\n      varName = gsub(\" .*$\", \"\",model1)\n\n      # merge neuro and pheno\n      dat = as.data.frame(merge(neuro, pheno, by = IDvar))\n\n      ############\n      ## remove NAs from any of the modelled variables because model 1 and model 2 may otherwise not be fitted to the same size dataset\n      # identify the longer model\n      # note: nchar should be enough of a criterion to identify the longer model because model1 and model2 are nested and should include the same variables with the same number of characters with the exception of one additional predictor\n      if(na.action == \"na.rm\"){\n          index=which(c(nchar(model1), nchar(model2)) == max(c(nchar(model1), nchar(model2))))\n          longest = get(paste0(\"model\", index))\n          # identify variables indicates in longest model\n          vars=strsplit(longest, \" \")[[1]]\n          # keep every second character because this will exclude the special model characters\n          Seq = seq(1, 100, by = 2)\n          vars = vars[Seq]\n          vars = vars[!is.na(vars)]\n\n          # only keep variables indicated in the model\n          dat = dat[,c(IDvar, vars)]\n\n          # remove missing data\n          dat = na.omit(dat)\n      }\n      ############\n\n      # throw error if varName doe snot exist in data\n      if(isFALSE(varName %in% names(dat))){\n        warning(\"The model you indicated includes a variable that does not exist in the data.\")\n      }\n\n      # create object to hold final results\n      results = list()\n\n      # create objects to hold temporary results\n      mNames = c(\"AIC\", \"BIC\", \"R2_percent\", \"N\")\n      m1 = data.frame(matrix(nrow = 1, ncol = length(mNames)))\n      names(m1) = mNames\n      m2 = data.frame(matrix(nrow = 1, ncol = length(mNames)))\n      names(m2) = mNames\n\n      if(modelType == \"Linear\"){\n          # define model 1\n          fit1 = lm(model1, data = dat)\n\n          # define model 2\n          fit2 = lm(model2, data = dat)\n\n          # R2 (not adjusted R2)\n          m1$R2_percent = summary(fit1)$r.squared * 100\n          m2$R2_percent = summary(fit2)$r.squared * 100\n\n          # compare model fit\n          results[[\"LRT\"]] = anova(fit1, fit2, test =\"Chisq\")\n\n      }else if(modelType == \"Logistic\"){\n\n          # dependent variable in logistic model must be a factor\n          dat[,varName] = as.factor(dat[,varName])\n\n          # model 1\n          fit1 = glm(model1, family = \"binomial\", data = dat)\n\n          # model 2\n          fit2 = glm(model2, family = \"binomial\", data = dat)\n\n          # Adjusted R2\n          #Nagelkerke N (1991) A note on a general definition of the coefficient of determination. Biometrika, 78: 691-692.\n          #Faraway JJ (2006) Extending the linear models with R: Generalized linear, mixed effects and nonparametric regression models. Chapman and Hall.\n          m1$R2_percent = fmsb::NagelkerkeR2(fit1)$R2 *100\n          m2$R2_percent = fmsb::NagelkerkeR2(fit2)$R2 *100\n\n          # compare model fit\n          results[[\"LRT\"]] = anova(fit1, fit2, test =\"Chisq\")\n\n          # store chi2p value in m1\n          #m1$chi2p\n\n      }else if(modelType == \"Hurdle\"){\n          # Due to the zero-inflated and data dispersed nature of variable such as packyears, previous studies have used hurdle negative binomial regression\n          #https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7235023/\n          #https://github.com/CNPsyLab/UKB-Smoking/blob/master/UKB%20smoking%20gray%20matter%20analyses\n          #https://www.rdocumentation.org/packages/pscl/versions/1.5.5.1/topics/hurdle\n          # When a variable is overdispersed, SEs tend to be downward biased, making confidence intervalls smaller which could result in false conclusions\n          # this function doesn't run unless packyears is an integer & predictor variables have been standardised (especially TBV and ICV that have large total values)\n          # Understanding Hurdle regression:\n          # Suppose that g1(0) is the probability value when the value for response variable iszero and that g2(k), k = 1, 2, . . . is a probability function when the response variable is apositive integer\n          # Two parts of the equation:q\n          # 1. get marginal effects: logit(y ~ x1 + x2)\n          # 2. get marginal effects (for y > 0): ztnb(y ~ x1 + x2) [zero-truncated negative binomial]\n\n          # dependent variable has to be integer\n          dat[,varName] = as.integer(round(dat[,varName]))\n\n          # define first model\n          fit1 = pscl::hurdle(as.formula(model1), data = dat, dist=\"negbin\")\n\n          # define second model\n          fit2 = pscl::hurdle(as.formula(model2), data = dat, dist=\"negbin\")\n\n          # calculate pseudo R2 (picked r2ML)\n          # rough analogue to the computation of r-squared in a linear regression\n          m1$R2_percent = pscl::pR2(fit1)[5]*100\n          m2$R2_percent = pscl::pR2(fit2)[5]*100\n\n          # model comparison using log-likelihood\n          x_1=-(fit1$loglik)\n          x_2=-(fit2$loglik)\n          # The likelihood ratio test is based on the statistic lambda = -2*(x_1-x_2).  If the null model is correct, this test statistic is distributed as chi-squared with degrees of freedom, k, equal to the difference in the number of parameters between the two models that are being fit for.  This is known as Wilkâ€™s theorem.\n          lambda = -2*(x_1 - x_2)\n          # k can be calculated by subtracting the total number of parameters in the smaller model from the total parameters in the larger model\n          # identify number of variables in model 1\n          vars1=strsplit(model1, \" \")[[1]]\n          Seq = seq(1, 100, by = 2)\n          vars1 = vars1[Seq]\n          L1 = length(vars1[!is.na(vars1)])\n          # identify number of variables in model 2\n          vars2=strsplit(model2, \" \")[[1]]\n          Seq = seq(1, 100, by = 2)\n          vars2 = vars2[Seq]\n          L2 = length(vars2[!is.na(vars2)])\n          # calculate k\n          k = abs(L1-L2)\n\n          if(k != 0){\n            # calculate LRT p-value\n            chi2p=1-pchisq(lambda,k)\n          }else if(k == 0){\n            chi2p = NA\n            message(\"You indicated two models that are not nested. Hence, LRT cannot be calculated, k = 0 and p-value is noted NA in the results table.\")\n          }\n\n          # save LRT results\n          an = data.frame(model1 = model1,\n                          model2 = model2,\n                          lambda = lambda,\n                          k = k,\n                          chi2p = chi2p)\n          results[[\"LRT\"]] = an\n      }\n\n      # AIC\n      m1$AIC = stats::extractAIC(fit1)[2]\n      m2$AIC = stats::extractAIC(fit2)[2]\n\n      # BIC\n      m1$BIC = stats::BIC(fit1)\n      m2$BIC = stats::BIC(fit2)\n\n      # N\n      m1$N = sum(!is.na(dat[,varName]))\n      m2$N = sum(!is.na(dat[,varName]))\n\n      # store pheno info\n      m1$Phenotype = varName\n      m2$Phenotype = varName\n\n      # store more general model info\n      m1$Model = stringr::str_replace(model1, pattern = varName, replacement = \"Phenotype\")\n      m2$Model = stringr::str_replace(model2, pattern = varName, replacement = \"Phenotype\")\n\n      # store atrophy score\n      m1$AtrophyScore = NA\n      if(length(grep(\"diff\", model1)) != 0){\n        m1$AtrophyScore = \"Difference score\"\n      }else if(length(grep(\"ratio\", model1)) != 0){\n        m1$AtrophyScore = \"Ratio score\"\n      }else if(length(grep(\"resid\", model1)) != 0){\n        m1$AtrophyScore = \"Residual Score\"\n      }\n\n      m2$AtrophyScore = NA\n      if(length(grep(\"diff\", model1)) != 0){\n        m2$AtrophyScore = \"Difference score\"\n      }else if(length(grep(\"ratio\", model1)) != 0){\n        m2$AtrophyScore = \"Ratio score\"\n      }else if(length(grep(\"resid\", model1)) != 0){\n        m2$AtrophyScore = \"Residual Score\"\n      }\n\n      # Cohort if not empty\n      if(!is.na(Cohort)){\n        m1$Cohort = Cohort\n        m2$Cohort = Cohort\n      }\n\n      # Aim if not empty\n      if(!is.na(Aim)){\n        m1$Aim = Aim\n        m2$Aim = Aim\n      }\n\n      # save frames in final results\n      results[[\"m1\"]] = m1\n      results[[\"m2\"]] = m2\n\n      return(results)\n}\n\n#### visualise Aim 3\n### define functions\n\n# visualise aim 3.1\nplot_aim3.1 = function(res = res,\n                       modelX = modelX,\n                       modelY = modelY,\n                       chi2sigThreshold = 0.5/13){\n\n  # load libs\n  library(ggplot2)\n  library(ggrepel)\n\n  # add superscript\n  superscript = quote(R^2)\n  # create chi-square category\n  res$`Model comparison:\\nChi-squared p-value` = \"No nested model\"\n  res$`Model comparison:\\nChi-squared p-value`[!is.na(res$sig)] = paste0(\"ns. (p > \",round(chi2sigThreshold, digits = 3),\")\")\n  res$`Model comparison:\\nChi-squared p-value`[which(res$sig < chi2sigThreshold)] = paste0(\"sig. (p < \",round(chi2sigThreshold, digits = 3),\")\")\n\n  # clean label column to keep sigTraits only\n  res$Phenotype[which(res$sig > chi2sigThreshold)] = NA\n  # also remove label if ns and R2 below 1%\n  res$Phenotype[res$R2_percent_m1 < 1.5 & res$R2_percent_m2 < 1.5] = NA\n\n  ggplot(data = res) +\n    geom_jitter(aes(x = R2_percent_m1, y = R2_percent_m2, colour = AtrophyScore, shape = `Model comparison:\\nChi-squared p-value`),\n                size = 3,\n                alpha = 0.5,\n                position = \"jitter\")+\n    xlab(bquote(.(modelX) ~ R^2))+\n    ylab(bquote(.(modelY) ~ R^2))+\n    geom_abline(slope = 1, intercept = 0, colour = \"grey\")+\n    ylim(-0.5,9.5)+\n    xlim(-0.5,14.5)+\n    #geom_segment(aes(x = 9, y = 8.2, xend = 9, yend = 8.7),\n    #             lineend = \"round\", linejoin = \"round\", color = \"grey\", linewidth = 0.5,\n    #             arrow = arrow(length = unit(0.2, \"cm\"), type = \"open\"))+\n    annotate(x = 9, y = 7.5, geom = \"text\", label = \"Line of identity\\n(intercept = 0,\\nslope = 1)\", colour = \"grey\")+\n    geom_text_repel(aes(x = R2_percent_m1, y = R2_percent_m2, label = Phenotype, color = AtrophyScore),\n                    box.padding = 0.5, max.overlaps = Inf,\n                    direction = \"y\")+\n    theme_bw()+\n    theme(axis.text.x = element_text(size=10, colour='#696969'), #text = element_text(size=10),\n          axis.text.y = element_text(size=10, colour='#696969'),\n          plot.title = element_text(face=\"bold\", colour='#1A1A1A', size=10, hjust = 0.5),\n          axis.title.x = element_text(face=\"bold\", colour='#1A1A1A', size=10, vjust = -0.5),\n          axis.title.y = element_text(face=\"bold\", colour='#1A1A1A', size=10),\n          axis.line.x.bottom = element_line(colour = \"grey\"),\n          axis.line.x.top = element_blank(),\n          axis.line.y.left = element_line(colour = \"grey\"),\n          axis.line.y.right = element_blank(),\n          axis.ticks.x = element_blank(),\n          axis.ticks.y = element_blank(),\n          panel.border = element_blank(),\n          axis.title.x.top = element_text(color = \"grey\", size=10, hjust=0),\n          plot.margin = margin(1.1,1.1,1.1,1.1, \"cm\"))\n\n}\n\n# visualise aim 3.2\nplot_aim3.2 = function(res = res,\n                       modelX = modelX,\n                       modelY = modelY,\n                       chi2sigThreshold = 0.5/13){\n\n  # identify sig taits according to chi2p\n  res$`Model comparison:\\nChi-squared p-value` = paste0(\"ns. (p > \",round(chi2sigThreshold, digits = 3),\")\")\n  res$`Model comparison:\\nChi-squared p-value`[which(res$sig < chi2sigThreshold)] = paste0(\"sig. (p < \",round(chi2sigThreshold, digits = 3),\")\")\n\n  # clean label column to keep sigTraits only\n  sigTraits = res$Phenotype[which(res$sig < chi2sigThreshold)]\n  res$Phenotype[!res$Phenotype %in%sigTraits] = NA\n  res$Phenotype[duplicated(res$Phenotype)] = NA\n\n  superscript = quote(R^2)\n\n  # load libs\n  library(ggplot2)\n  library(ggrepel)\n\n\n  ggplot(data = res) +\n    geom_jitter(aes(x = R2_percent_m1, y = R2_percent_m2, colour = AtrophyScore, shape = `Model comparison:\\nChi-squared p-value`),\n                size = 3,\n                alpha = 0.5,\n                position = \"jitter\")+\n    xlab(bquote(.(modelX) ~ R^2))+\n    ylab(bquote(.(modelY) ~ R^2))+\n    geom_abline(slope = 1, intercept = 0, colour = \"grey\")+\n    ylim(-0.5,10)+\n    xlim(-0.5,15)+\n    annotate(x = 2, y = 4, geom = \"text\", label = \"Line of identity\\n(intercept = 0,\\nslope = 1)\", colour = \"grey\")+ #(atan(2)*180/pi)-1.434949)\n    geom_text_repel(aes(x = R2_percent_m1, y = R2_percent_m2, label = Phenotype),\n                    segment.color = \"grey45\",\n                    color = \"grey45\",\n                    box.padding = 0.5, max.overlaps = Inf,\n                    direction = \"y\")+\n    theme_bw()+\n    theme(text = element_text(size=10),\n          axis.text.x = element_text(size=10, colour='#696969'),\n          axis.text.y = element_text(size=10, colour='#696969'),\n          plot.title = element_text(face=\"bold\", colour='#1A1A1A', size=10, hjust = 0.5),\n          axis.title.x = element_text(face=\"bold\", colour='#1A1A1A', size=10),\n          axis.title.y = element_text(face=\"bold\", colour='#1A1A1A', size=10),\n          axis.line.x.bottom = element_line(colour = \"grey\"),\n          axis.line.x.top = element_blank(),\n          axis.line.y.left = element_line(colour = \"grey\"),\n          axis.line.y.right = element_blank(),\n          axis.ticks.x = element_blank(),\n          axis.ticks.y = element_blank(),\n          panel.border = element_blank(),\n          axis.title.x.top = element_text(color = \"grey\", size=10, hjust=0))\n\n}\n\n# visualise aim 3.3\nplot_aim3.3 = function(res = res,\n                       modelX = modelX,\n                       modelY = modelY,\n                       chi2sigThreshold = chi2sigThreshold){\n\n  # identify sig taits according to chi2p\n  res$`Model comparison:\\nChi-squared p-value` = paste0(\"ns. (p > \",round(chi2sigThreshold, digits = 3),\")\")\n  res$`Model comparison:\\nChi-squared p-value`[which(res$sig < chi2sigThreshold)] = paste0(\"sig. (p < \",round(chi2sigThreshold, digits = 3),\")\")\n\n  # clean label column to keep sigTraits only\n  res$Phenotype[which(res$sig > chi2sigThreshold)] = NA\n\n  superscript = quote(R^2)\n\n  # load libs\n  library(ggplot2)\n  library(ggrepel)\n\n\n  ggplot(data = res) +\n    geom_jitter(aes(x = R2_percent_m1, y = R2_percent_m2, colour = AtrophyScore, shape = `Model comparison:\\nChi-squared p-value`),\n                size = 3,\n                alpha = 0.5,\n                position = \"jitter\")+\n    xlab(bquote(.(modelX) ~ R^2))+\n    ylab(bquote(.(modelY) ~ R^2))+\n    geom_abline(slope = 1, intercept = 0, colour = \"grey\")+\n    ylim(-0.5,14.5)+\n    xlim(-0.5,23)+\n    annotate(x = 2, y = 4, geom = \"text\", label = \"Line of identity\\n(intercept = 0,\\nslope = 1)\", colour = \"grey\")+\n    geom_text_repel(aes(x = R2_percent_m1, y = R2_percent_m2, label = Phenotype, color = AtrophyScore),\n                    segment.color = \"grey\",\n                    box.padding = 0.5, max.overlaps = Inf,\n                    direction = \"y\")+\n    theme_bw()+\n    theme(text = element_text(size=10),\n          axis.text.x = element_text(size=10, colour='#696969'),\n          axis.text.y = element_text(size=10, colour='#696969'),\n          plot.title = element_text(face=\"bold\", colour='#1A1A1A', size=10, hjust = 0.5),\n          axis.title.x = element_text(face=\"bold\", colour='#1A1A1A', size=10),\n          axis.title.y = element_text(face=\"bold\", colour='#1A1A1A', size=10),\n          axis.line.x.bottom = element_line(colour = \"grey\"),\n          axis.line.x.top = element_blank(),\n          axis.line.y.left = element_line(colour = \"grey\"),\n          axis.line.y.right = element_blank(),\n          axis.ticks.x = element_blank(),\n          axis.ticks.y = element_blank(),\n          panel.border = element_blank(),\n          axis.title.x.top = element_text(color = \"grey\", size=10, hjust=0))\n\n}\n```\n:::\n\n\n# Lothian Birth Cohort 1936 (LBC1936)\n\n## Aim 3.1\n\nWe hypothesise that evidence from Section 3.1 will confirm that health outcome prediction in older-age populations can be amplified when models consider ICV as a covariate alongside TBV, as this should focus the analysis on brain matter losses rather than differences in head size.\n\n### Difference score\n\n1.  Health-related phenotypes \\~ ICV time 2 - TBV time 2\n2.  Health-related phenotypes \\~ TBV time 2\n\nNote that by `time 2` I am mean the second visit we're considering, i.e., wave 5 in LBC.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in LBC data \nneuro = fread(paste0(wd, \"/LBC1936_crossNeuroWave4.txt\"), data.table = F)\npheno = fread(paste0(wd, \"/LBC1936_allPheno.txt\"), data.table = F)\n# standardise numeric variables \nColNames = c(\"iCog\", \"sCog\", \"iFrailty\", \"sFrailty\", \"iBMI\", \"sBMI\", \"BrainAge\")\npheno[,ColNames] = as.data.frame(lapply(pheno[,ColNames], scale))\n\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"lbc36no\")]){\n  \n  # define models\n  model1 = paste0(i, \" ~ diff_stand\")\n  model2 = paste0(i, \" ~ TBVstand\")\n  \n  if(i %in% c(\"iCog\", \"sCog\", \"iFrailty\", \"sFrailty\", \"iBMI\", \"sBMI\", \"BrainAge\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% \"packyears\"){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"LBC\", \n              Aim = \"3.1\")\n        \n  # name it according to its test\n  assign(paste0(\"LBC_3.1_diff_\", i), res)\n}\n\nls(pattern = \"LBC_3.1_diff\")\n```\n:::\n\n\n### Ratio score\n\n1.  Health-related phenotypes \\~ TBV time 2 / ICV time 2\n2.  Health-related phenotypes \\~ TBV time 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"lbc36no\")]){\n  \n  # define models\n  model1 = paste0(i, \" ~ ratio_stand\")\n  model2 = paste0(i, \" ~ TBVstand\")\n  \n  if(i %in% c(\"iCog\", \"sCog\", \"iFrailty\", \"sFrailty\", \"iBMI\", \"sBMI\", \"BrainAge\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% \"packyears\"){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro,\n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"LBC\", \n              Aim = \"3.1\")\n        \n  # name it according to its test\n  assign(paste0(\"LBC_3.1_ratio_\", i), res)\n}\n\n\nls(pattern = \"LBC_3.1_ratio\")\n```\n:::\n\n\n### Residual score\n\n1.  Health-related phenotypes \\~ TBV time 2 + ICV time 2\n2.  Health-related phenotypes \\~ TBV time 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"lbc36no\")]){\n  \n  # define models\n  model1 = paste0(i, \" ~ resid_stand\")\n  model2 = paste0(i, \" ~ TBVstand\")\n  \n  if(i %in% c(\"iCog\", \"sCog\", \"iFrailty\", \"sFrailty\", \"iBMI\", \"sBMI\", \"BrainAge\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% \"packyears\"){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro,\n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"LBC\", \n              Aim = \"3.1\")\n        \n  # name it according to its test\n  assign(paste0(\"LBC_3.1_resid_\", i), res)\n}\n\n\nls(pattern = \"LBC_3.1_resid\")\n```\n:::\n\n\n### CSF\n\n1.  Health-related phenotypes \\~ CSF time 2 + ICV time 2\n2.  Health-related phenotypes \\~ CSF time 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"lbc36no\")]){\n  \n  # define models\n  model1 = paste0(i, \" ~ CSFstand + ICVstand\")\n  model2 = paste0(i, \" ~ CSFstand\")\n  \n  if(i %in% c(\"iCog\", \"sCog\", \"iFrailty\", \"sFrailty\", \"iBMI\", \"sBMI\", \"BrainAge\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% \"packyears\"){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"LBC\", \n              Aim = \"3.1\")\n        \n  # name it according to its test\n  assign(paste0(\"LBC_3.1_CSF_\", i), res)\n}\n\n\nls(pattern = \"LBC_3.1_CSF\")\n```\n:::\n\n\n## Aim 3.2\n\n1.  Health-related phenotypes \\~ ICV time 2 (or TBV time 2) + cross-sectional atrophy time 2\n2.  Health-related phenotypes \\~ ICV time 2 (or TBV time 2)\n\nNote: repeat this analysis twice for models with TBV and models with TCV and for each cross-sectional atrophy measure (diff, resid, ratio)\n\nAs in aim 3.1, this is still using cross-sectional data from visit 2 (wave 5)\n\n### Difference score\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##### Model 1: comparison against ICV\n\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"lbc36no\")]){\n  # define models \n  model1 = paste0(i, \" ~ ICVstand + diff_stand\")\n  model2 = paste0(i, \" ~ ICVstand\")\n\n  if(i %in% c(\"iCog\", \"sCog\", \"iFrailty\", \"sFrailty\", \"iBMI\", \"sBMI\", \"BrainAge\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% \"packyears\"){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"LBC\", \n              Aim = \"3.2\")\n        \n  # name it according to its test\n  assign(paste0(\"LBC_3.2_diffvsICV_\", i), res)\n}\n\n\n##### Model 2: comparison against TBV\n\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"lbc36no\")]){\n  \n  # define models \n  model1 = paste0(i, \" ~ TBVstand + diff_stand\")\n  model2 = paste0(i, \" ~ TBVstand\")\n\n  if(i %in% c(\"iCog\", \"sCog\", \"iFrailty\", \"sFrailty\", \"iBMI\", \"sBMI\", \"BrainAge\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% \"packyears\"){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"LBC\", \n              Aim = \"3.2\")\n        \n  # name it according to its test\n  assign(paste0(\"LBC_3.2_diffvsTBV_\", i), res)\n}\n\n\nls(pattern=\"LBC_3.2_diff\")\n```\n:::\n\n\n### Ratio score\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##### Model 1: comparison against ICV\n\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"lbc36no\")]){\n  # define models \n  model1 = paste0(i, \" ~ ICVstand + ratio_stand\")\n  model2 = paste0(i, \" ~ ICVstand\")\n\n  if(i %in% c(\"iCog\", \"sCog\", \"iFrailty\", \"sFrailty\", \"iBMI\", \"sBMI\", \"BrainAge\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% \"packyears\"){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"LBC\", \n              Aim = \"3.2\")\n        \n  # name it according to its test\n  assign(paste0(\"LBC_3.2_ratiovsICV_\", i), res)\n}\n\n\n##### Model 2: comparison against TBV\n\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"lbc36no\")]){\n  \n  # define models \n  model1 = paste0(i, \" ~ TBVstand + ratio_stand\")\n  model2 = paste0(i, \" ~ TBVstand\")\n\n  if(i %in% c(\"iCog\", \"sCog\", \"iFrailty\", \"sFrailty\", \"iBMI\", \"sBMI\", \"BrainAge\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% \"packyears\"){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"LBC\", \n              Aim = \"3.2\")\n        \n  # name it according to its test\n  assign(paste0(\"LBC_3.2_ratiovsTBV_\", i), res)\n}\n\n\nls(pattern=\"LBC_3.2_ratio\")\n```\n:::\n\n\n### Residual score\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##### Model 1: comparison against ICV\n\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"lbc36no\")]){\n  # define models \n  model1 = paste0(i, \" ~ ICVstand + resid_stand\")\n  model2 = paste0(i, \" ~ ICVstand\")\n\n  if(i %in% c(\"iCog\", \"sCog\", \"iFrailty\", \"sFrailty\", \"iBMI\", \"sBMI\", \"BrainAge\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% \"packyears\"){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"LBC\", \n              Aim = \"3.2\")\n        \n  # name it according to its test\n  assign(paste0(\"LBC_3.2_residvsICV_\", i), res)\n}\n\n\n##### Model 2: comparison against TBV\n\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"lbc36no\")]){\n  \n  # define models \n  model1 = paste0(i, \" ~ TBVstand + resid_stand\")\n  model2 = paste0(i, \" ~ TBVstand\")\n\n  if(i %in% c(\"iCog\", \"sCog\", \"iFrailty\", \"sFrailty\", \"iBMI\", \"sBMI\", \"BrainAge\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% \"packyears\"){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"LBC\", \n              Aim = \"3.2\")\n        \n  # name it according to its test\n  assign(paste0(\"LBC_3.2_residvsTBV_\", i), res)\n}\n\n\nls(pattern=\"LBC_3.2_resid\")\n```\n:::\n\n\n## Aim 3.3\n\n1.  Health-related phenotypes \\~ cross-sectional atrophy time 2 + longitudinal atrophy\n2.  Health-related phenotypes \\~ cross-sectional atrophy time 2\n\n### Difference score\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in cross-sectional data\ncross = fread(paste0(wd,\"/LBC1936_crossNeuroWave1.txt\"), data.table = F)\n\n# read in longitudinal data \nlong = fread(paste0(wd, \"/LBC1936_longTBVWaves2and5.txt\"), data.table = F)\n\n# merge cross and long data \nneuro = merge(cross, long, by = \"lbc36no\")\n\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"lbc36no\")]){\n  \n  # define models \n  model1 = paste0(i, \" ~ diff_stand + TBVdiff_2to5_stand\")\n  model2 = paste0(i, \" ~ diff_stand\")\n\n  if(i %in% c(\"iCog\", \"sCog\", \"iFrailty\", \"sFrailty\", \"iBMI\", \"sBMI\", \"BrainAge\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% \"packyears\"){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro,\n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              na.action = \"na.rm\",\n              Cohort = \"LBC\", \n              Aim = \"3.3\")\n        \n  # name it according to its test\n  assign(paste0(\"LBC_3.3_diff_\", i), res)\n}\n\n\nls(pattern=\"LBC_3.3_diff\")\n```\n:::\n\n\n### Ratio score\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"lbc36no\")]){\n  \n  # define models \n  model1 = paste0(i, \" ~ ratio_stand + TBVratio_5to2_stand\")\n  model2 = paste0(i, \" ~ ratio_stand\")\n\n  if(i %in% c(\"iCog\", \"sCog\", \"iFrailty\", \"sFrailty\", \"iBMI\", \"sBMI\", \"BrainAge\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% \"packyears\"){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              na.action = \"na.rm\",\n              Cohort = \"LBC\", \n              Aim = \"3.3\")\n        \n  # name it according to its test\n  assign(paste0(\"LBC_3.3_ratio_\", i), res)\n}\n\n\nls(pattern=\"LBC_3.3_ratio\")\n```\n:::\n\n\n### Residual score\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"lbc36no\")]){\n  \n  # define models \n  model1 = paste0(i, \" ~ resid_stand + TBVresid_2to5_stand\")\n  model2 = paste0(i, \" ~ resid_stand\")\n\n  if(i %in% c(\"iCog\", \"sCog\", \"iFrailty\", \"sFrailty\", \"iBMI\", \"sBMI\", \"BrainAge\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% \"packyears\"){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              na.action = \"na.rm\",\n              Cohort = \"LBC\", \n              Aim = \"3.3\")\n        \n  # name it according to its test\n  assign(paste0(\"LBC_3.3_resid_\", i), res)\n}\n\n\nls(pattern=\"LBC_3.3_resid\")\n\n# save all models \nsave(list=ls(pattern=\"LBC_\"), file = paste0(wd, \"/LBC_Aim3.4.RData\"))\n```\n:::\n\n\n## Aim 3.4\n\n\n::: {.cell}\n\n```{.r .cell-code}\n########################################\n### sort through results\nload(paste0(wd, \"/LBC_Aim3.4.RData\"))\n\nls(pattern=\"LBC_\")\n\n# create two objects to hold results from model 1 and model 2\nm1 = data.frame()\nm2 = data.frame()\n\n# pull together all R2 values from all analyses in 3.1\nfor(i in ls(pattern = \"LBC_\")){\n\t# get object\n\tobj = get(i)\n\t\n\t# if CSF, no atrophy score has been recorded\n\tif(length(grep(\"CSF\", i)) != 0){\n\t  obj$m1$AtrophyScore = \"CSF\"\n\t  obj$m2$AtrophyScore = \"CSF\"\n\t}\n\t\n\t# save  model to match m1 and m2\n\tobj$m1$comp = i\n\tobj$m2$comp = i\n\t\n\t# save object results in m1\n\tm1 = rbind(m1, obj$m1)\n\t\n\t# save object results in m2\n\tm2 = rbind(m2, obj$m2)\n}\n\n# save whether m1 or m2\nnames(m1)[which(names(m1) == \"R2_percent\")] = \"R2_percent_m1\"\nnames(m1)[which(names(m1) == \"Model\")] = \"Model_m1\"\n\nnames(m2)[which(names(m2) == \"R2_percent\")] = \"R2_percent_m2\"\nnames(m2)[which(names(m2) == \"Model\")] = \"Model_m2\"\n\n# merge m1 and m2\nm1 = m1[,c(\"R2_percent_m1\", \"Phenotype\", \"Model_m1\", \"AtrophyScore\", \"comp\")]\nm2 = m2[,c(\"R2_percent_m2\", \"Phenotype\", \"Model_m2\", \"AtrophyScore\", \"comp\")]\n\nboth = merge(m1, m2, by = c(\"comp\", \"Phenotype\", \"AtrophyScore\"))\n\n# I decided to calculuate the residual score model in 3.1 as a nested model, hence needs manual renaming\nboth$AtrophyScore[grepl(\"TBVstand\", both$Model_m1) & grepl(\"ICVstand\", both$Model_m1)] = \"Residual Score\"\n\n#### figure out for each of the comparisons if the chi2 test was significant\n\nboth$sig = NA\n\nfor(i in both$comp){\n  # get raw data\n  raw = get(i)\n  \n  # find chi2p value\n  chi2p = raw$LRT$`Pr(>Chi)`[2]\n\n  # if it's packyears, check for different formatting\n  if(any(grepl(\"chi2p\", names(raw$LRT)))){chi2p = raw$LRT$chi2p}\n\n  # store in 'both'\n  both$sig[which(both$comp == i)] = chi2p\n}\n\n######################################################\n# unfortunately the data structures are different enough between the different Aims, that I will process each aim separately\n\n######################################################\n# Aim 3.1\n######################################################\nres = both[grep(\"3.1_\", both$comp),]\n\n# remove CSF because its confusing\nres = res[which(res$AtrophyScore != \"CSF\"),]\n\n# x and y axis labels\nmodelX = \"[Phenotype ~ Atrophy Score] \"\nmodelY = \"[Phenotype ~ TBV] \"\n\n# filter phenotypes\n#sigTraits = c(\"iCog\",\"sCog\",\"iFrailty\",\"sFrailty\",\"iBMI\",\"sBMI\",\"BrainAge\",\"dementia\",\"hypertension\")\n#res$Phenotype[!res$Phenotype %in%sigTraits] = NA\n\nplot3.1 = plot_aim3.1(res = res, \n            modelX = modelX,\n            modelY = modelY,\n            chi2sigThreshold = 0.5/sum(!is.na(res$sig)))+\n  ggtitle(\"Aim 3.1: Does an Atrophy Score explain more variance than TBV alone?\")\n\n######################################################\n# Aim 3.2 (ICV)\n######################################################\nres = both[grep(\"3.2_\", both$comp),]\nres = res[grep(\"ICV_\", res$comp),]\n\n# x and y axis labels\nmodelX = res$Model_m1[1]\nmodelX = stringr::str_replace(modelX, pattern = \"diff_stand\", replacement = \"AtrophyScore\")\nmodelX = stringr::str_remove(modelX, pattern = \"stand\")\nmodelX = paste0(\"[\", modelX, \"] \")\n\nmodelY= res$Model_m2[1]\nmodelY = stringr::str_remove(modelY, pattern = \"stand\")\nmodelY = paste0(\"[\", modelY, \"] \")\n\n# determine chi-squared p-value cut off (save for models with ICV and TBV)\nchi2sigThreshold = 0.5/(13*3)\n\nICV3.2 = plot_aim3.2(res = res, \n            modelX = modelX,\n            modelY = modelY,\n            chi2sigThreshold = chi2sigThreshold)\n\n# add title\nICV3.2 = ICV3.2 + ggtitle(\"Aim 3.2: Does a cross-sectional atrophy score add explanatory\\nvariance above and beyond ICV?\")\n\n######\n# Aim 3.2 (TBV)\n######\nres = both[grep(\"3.2_\", both$comp),]\nres = res[grep(\"TBV_\", res$comp),]\n\n# x and y axis labels\nmodelX = res$Model_m1[1]\nmodelX = stringr::str_replace(modelX, pattern = \"diff_stand\", replacement = \"AtrophyScore\")\nmodelX = stringr::str_remove(modelX, pattern = \"stand\")\nmodelX = paste0(\"[\", modelX, \"] \")\n\nmodelY= res$Model_m2[1]\nmodelY = stringr::str_remove(modelY, pattern = \"stand\")\nmodelY = paste0(\"[\", modelY, \"] \")\n\nTBV3.2 = plot_aim3.2(res = res, \n                     modelX = modelX,\n                     modelY = modelY,\n                     chi2sigThreshold = chi2sigThreshold)\n# add title\nTBV3.2 = TBV3.2 + ggtitle(\"Aim 3.2: Does a cross-sectional atrophy score add explanatory\\nvariance above and beyond TBV?\")\n\n# combine both plots\nggpubr::ggarrange(ICV3.2, TBV3.2, common.legend = T, legend = \"bottom\")\n\npng(\"test.png\", width = 1200, height = 700, bg = \"white\", res = 800)\n# combine both plots\nggpubr::ggarrange(ICV3.2, TBV3.2, common.legend = T, legend = \"bottom\")\ndev.off()\n\n########################\n##### histogram\nggplot(data = res)+\n  geom_histogram(aes(x = sig, fill = AtrophyScore))+\n  xlab(\"Chi-squared p-values\")+\n  theme_bw()\n\n\n######################################################\n# Aim 3.3\n######################################################\nres = both[grep(\"3.3_\", both$comp),]\n\n# x and y axis labels\nmodelX = \"[Phenotype ~ estimated Atrophy + observed Atrophy] \"\nmodelY = \"[Phenotype ~ estimated Atrophy] \"\n\nchi2sigThreshold = 0.5/ sum(!is.na(res$sig))\n\nplot_aim3.3(res = res, \n            modelX = modelX,\n            modelY = modelY,\n            chi2sigThreshold = chi2sigThreshold)+\n  ggtitle(\"Aim 3.3: Do estimated Atrophy Scores capture all trait relevant variance observed Atrophy Scores capture?\")\n\n# width 800, height 700\n```\n:::\n\n\n![LBC1936: Aim 3.1](images/Aim3.1_LBC.jpg)\n\n![LBC1936: Aim 3.2](images/Aim3.2_LBC.png)\n\n![LBC1936: Aim 3.3](images/Aim3.3_LBC.jpg)\n\n# UK Biobank\n\n## Aim 3.1\n\nWe hypothesise that evidence from Section 3.1 will confirm that health outcome prediction in older-age populations can be amplified when models consider ICV as a covariate alongside TBV, as this should focus the analysis on brain matter losses rather than differences in head size.\n\n### Difference score\n\n1.  Health-related phenotypes \\~ ICV time 2 - TBV time 2\n2.  Health-related phenotypes \\~ TBV time 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in UKB data \nneuro = fread(paste0(wd, \"/UKB_neuroNoLongProcess.txt\"), data.table = F)\npheno = fread(paste0(wd, \"/UKB_allPheno.txt\"), data.table = F)\n# get wave of interest\nneuro = neuro[which(neuro$wave == 3),]\n\n# standardise numeric variables \nColNames = c(\"cog\", \"BMI\")\npheno[,ColNames] = as.data.frame(lapply(pheno[,ColNames], scale))\n\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"f.eid\")]){\n  \n  # define models\n  model1 = paste0(i, \" ~ diff_stand\")\n  model2 = paste0(i, \" ~ TBVstand\")\n  neuroWave = 3\n  \n  if(i %in% c(\"cog\",\"BMI\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% c(\"packyears\",\"frailty\")){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              #neuroWave = neuroWave,\n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"UKB\", \n              Aim = \"3.1\")\n        \n  # name it according to its test\n  assign(paste0(\"UKB_3.1_diff_\", i), res)\n}\n\nls(pattern = \"UKB_3.1_diff\")\n```\n:::\n\n\n### Ratio score\n\n1.  Health-related phenotypes \\~ TBV time 2 / ICV time 2\n2.  Health-related phenotypes \\~ TBV time 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"f.eid\")]){\n  \n  # define models\n  model1 = paste0(i, \" ~ ratio_stand\")\n  model2 = paste0(i, \" ~ TBVstand\")\n  neuroWave = 3\n  \n  if(i %in% c(\"cog\",\"BMI\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% c(\"packyears\",\"frailty\")){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              #neuroWave = neuroWave,\n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"UKB\", \n              Aim = \"3.1\")\n        \n  # name it according to its test\n  assign(paste0(\"UKB_3.1_ratio_\", i), res)\n}\n\n\nls(pattern = \"UKB_3.1_ratio\")\n```\n:::\n\n\n### Residual score\n\n1.  Health-related phenotypes \\~ TBV time 2 + ICV time 2\n2.  Health-related phenotypes \\~ TBV time 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"f.eid\")]){\n  \n  # define models\n  model1 = paste0(i, \" ~ TBVstand + ICVstand\")\n  model2 = paste0(i, \" ~ TBVstand\")\n  neuroWave = 3\n  \n  if(i %in% c(\"cog\",\"BMI\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% c(\"packyears\",\"frailty\")){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              #neuroWave = neuroWave,\n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"UKB\", \n              Aim = \"3.1\")\n        \n  # name it according to its test\n  assign(paste0(\"UKB_3.1_resid_\", i), res)\n}\n\n\nls(pattern = \"UKB_3.1_resid\")\n```\n:::\n\n\n### CSF\n\n1.  Health-related phenotypes \\~ CSF time 2 + ICV time 2\n2.  Health-related phenotypes \\~ CSF time 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"f.eid\")]){\n  \n  # define models\n  model1 = paste0(i, \" ~ CSFstand + ICVstand\")\n  model2 = paste0(i, \" ~ CSFstand\")\n  neuroWave = 3\n  \n  if(i %in% c(\"cog\",\"BMI\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% c(\"packyears\",\"frailty\")){\n\n      modelType = \"Hurdle\"\n    \n  }\n  \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              #neuroWave = neuroWave,\n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"UKB\", \n              Aim = \"3.1\")\n        \n  # name it according to its test\n  assign(paste0(\"UKB_3.1_CSF_\", i), res)\n}\n\n\nls(pattern = \"UKB_3.1_CSF\")\n```\n:::\n\n\n## Aim 3.2\n\n1.  Health-related phenotypes \\~ ICV time 2 (or TBV time 2) + cross-sectional atrophy time 2\n2.  Health-related phenotypes \\~ ICV time 2 (or TBV time 2)\n\nNote: repeat this analysis twice for models with TBV and models with TCV and for each cross-sectional atrophy measure (diff, resid, ratio)\n\n### Difference score\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##### Model 1: comparison against ICV\n\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"f.eid\")]){\n  # define models \n  model1 = paste0(i, \" ~ ICVstand + diff_stand\")\n  model2 = paste0(i, \" ~ ICVstand\")\n  neuroWave = 3\n\n  if(i %in% c(\"cog\",\"BMI\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% c(\"packyears\",\"frailty\")){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              #neuroWave = neuroWave,\n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"UKB\", \n              Aim = \"3.2\")\n        \n  # name it according to its test\n  assign(paste0(\"UKB_3.2_diffvsICV_\", i), res)\n}\n\n\n##### Model 2: comparison against TBV\n\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"f.eid\")]){\n  \n  # define models \n  model1 = paste0(i, \" ~ TBVstand + diff_stand\")\n  model2 = paste0(i, \" ~ TBVstand\")\n  neuroWave = 3\n\n  if(i %in% c(\"cog\",\"BMI\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% c(\"packyears\",\"frailty\")){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              #neuroWave = neuroWave,\n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"UKB\", \n              Aim = \"3.2\")\n        \n  # name it according to its test\n  assign(paste0(\"UKB_3.2_diffvsTBV_\", i), res)\n}\n\n\nls(pattern=\"UKB_3.2_diff\")\n```\n:::\n\n\n### Ratio score\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##### Model 1: comparison against ICV\n\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"f.eid\")]){\n  # define models \n  model1 = paste0(i, \" ~ ICVstand + ratio_stand\")\n  model2 = paste0(i, \" ~ ICVstand\")\n  neuroWave = 3\n\n  if(i %in% c(\"cog\",\"BMI\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% c(\"packyears\",\"frailty\")){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              #neuroWave = neuroWave,\n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"UKB\", \n              Aim = \"3.2\")\n        \n  # name it according to its test\n  assign(paste0(\"UKB_3.2_ratiovsICV_\", i), res)\n}\n\n\n##### Model 2: comparison against TBV\n\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"f.eid\")]){\n  \n  # define models \n  model1 = paste0(i, \" ~ TBVstand + ratio_stand\")\n  model2 = paste0(i, \" ~ TBVstand\")\n  neuroWave = 3\n\n  if(i %in% c(\"cog\",\"BMI\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% c(\"packyears\",\"frailty\")){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              #neuroWave = neuroWave,\n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"UKB\", \n              Aim = \"3.2\")\n        \n  # name it according to its test\n  assign(paste0(\"UKB_3.2_ratiovsTBV_\", i), res)\n}\n\n\nls(pattern=\"UKB_3.2_ratio\")\n```\n:::\n\n\n### Residual score\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##### Model 1: comparison against ICV\n\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"f.eid\")]){\n  # define models \n  model1 = paste0(i, \" ~ ICVstand + resid_stand\")\n  model2 = paste0(i, \" ~ ICVstand\")\n  neuroWave = 3\n\n  if(i %in% c(\"cog\",\"BMI\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% c(\"packyears\",\"frailty\")){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              #neuroWave = neuroWave,\n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"UKB\", \n              Aim = \"3.2\")\n        \n  # name it according to its test\n  assign(paste0(\"UKB_3.2_residvsICV_\", i), res)\n}\n\n\n##### Model 2: comparison against TBV\n\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"f.eid\")]){\n  \n  # define models \n  model1 = paste0(i, \" ~ TBVstand + resid_stand\")\n  model2 = paste0(i, \" ~ TBVstand\")\n  neuroWave = 3\n\n  if(i %in% c(\"cog\",\"BMI\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% c(\"packyears\",\"frailty\")){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              #neuroWave = neuroWave,\n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              Cohort = \"UKB\", \n              Aim = \"3.2\")\n        \n  # name it according to its test\n  assign(paste0(\"UKB_3.2_residvsTBV_\", i), res)\n}\n\n\nls(pattern=\"UKB_3.2_resid\")\n```\n:::\n\n\n## Aim 3.3\n\n1.  Health-related phenotypes \\~ cross-sectional atrophy time 2 + longitudinal atrophy\n2.  Health-related phenotypes \\~ cross-sectional atrophy time 2\n\n### Difference score\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in longitudinal processed data \nneuro = fread(paste0(wd, \"/UKB_neuroNoLongProcess.txt\"))\n# keep only second wave\nneuro = neuro[which(neuro$wave == 3),]\n\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"f.eid\")]){\n  \n  # define models \n  model1 = paste0(i, \" ~ diff_stand + TBVdiff_2to3_stand\")\n  model2 = paste0(i, \" ~ diff_stand\")\n  neuroWave = 3\n\n  if(i %in% c(\"cog\",\"BMI\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% c(\"packyears\",\"frailty\")){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              #neuroWave = neuroWave,\n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              na.action = \"na.rm\",\n              Cohort = \"UKB\", \n              Aim = \"3.3\")\n        \n  # name it according to its test\n  assign(paste0(\"UKB_3.3_diff_\", i), res)\n}\n\n\nls(pattern=\"UKB_3.3_diff\")\n```\n:::\n\n\n### Ratio score\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"f.eid\")]){\n  \n  # define models \n  model1 = paste0(i, \" ~ ratio_stand + TBVratio_3to2_stand\")\n  model2 = paste0(i, \" ~ ratio_stand\")\n  neuroWave = 3\n\n  if(i %in% c(\"cog\",\"BMI\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% c(\"packyears\",\"frailty\")){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              #neuroWave = neuroWave,\n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              na.action = \"na.rm\",\n              Cohort = \"UKB\", \n              Aim = \"3.3\")\n        \n  # name it according to its test\n  assign(paste0(\"UKB_3.3_ratio_\", i), res)\n}\n\n\nls(pattern=\"UKB_3.3_ratio\")\n```\n:::\n\n\n### Residual score\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# iterate through all LBC traits\nfor(i in names(pheno)[which(names(pheno) != \"f.eid\")]){\n  \n  # define models \n  model1 = paste0(i, \" ~ resid_stand + TBVresid_2to3_stand\")\n  model2 = paste0(i, \" ~ resid_stand\")\n  neuroWave = 3\n\n  if(i %in% c(\"cog\",\"BMI\")){\n    \n      modelType = \"Linear\"\n\n  }else if(i %in% c(\"dementia\", \"APOEe4\", \"diabetes\", \"hypertension\", \"stroke\")){\n    \n      modelType = \"Logistic\"\n      \n  }else if(i %in% c(\"packyears\",\"frailty\")){\n\n      modelType = \"Hurdle\"\n    \n  }\n    \n  # run Aim3 function\n  res = Aim3(neuro = neuro, \n              #neuroWave = neuroWave,\n              pheno = pheno,\n              model1 = model1,\n              model2 = model2,\n              modelType = modelType, \n              na.action = \"na.rm\",\n              Cohort = \"UKB\", \n              Aim = \"3.3\")\n        \n  # name it according to its test\n  assign(paste0(\"UKB_3.3_resid_\", i), res)\n}\n\nls(pattern=\"UKB_3.3_resid\")\n\n# save all models \nsave(list=ls(pattern=\"UKB_\"), file = paste0(wd, \"/UKB_Aim3.4.RData\"))\n```\n:::\n\n\nPlots generated with same code as printed for LBC above.\n\n![UKB: Aim 3.1](images/Aim3.1_UKB.jpg)\n\n\n\n![UKB: Aim 3.2](images/Aim3.2_UKB.png)\n\n\n\n\n![UKB: Aim 3.3](images/Aim3.3_UKB.jpg)\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}