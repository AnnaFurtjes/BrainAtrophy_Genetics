{"title":"Genetic Principal Components","markdown":{"yaml":{"title":"Genetic Principal Components","format":{"html":{"code-fold":true}},"author":"Anna Elisabeth Furtjes","date":"`r format(Sys.time(), '%d %B %Y')`","output":"html","doi":"10.1101/2024.11.06.622274"},"headingText":"load bed file","containsRefs":false,"markdown":"\n\n------------------------------------------------------------------------\n\nUpon completion of our study, it was brought to our attention by a colleague that we may be over-correcting our GWAS by including 40 genetic PCs as covariates. We had decided to include the 40 genetic PCs because they are provided by UKB and have routinely included been included in previous neuroimaging genetic GWAS using the UK Biobank data.\n\nHere, we are relying on a toolkit by [Prive et al. 2020](https://academic.oup.com/bioinformatics/article/36/16/4449/5838185) to better understand the structure of genetic PCs in our 43k neuroimaging subsample. The results presented below were used to decide that we will repeat our GWAS analysis by controlling for 8 genetic PCs.\n\nCode was adopted from [here](https://privefl.github.io/bigsnpr/articles/bedpca.html) and ran very smoothly.\n\n```{r, eval = F}\nlibrary(bigsnpr)\nlibrary(ggplot2)\n\nbedfile <- \"ukb_neuroimaging_brainAtrophy_GWASinput.bed\"\nobj.bed <- bed(bedfile)\n\n# this data was previously cleaned and should not contain any related individuals, so this next step will include all pparticipants in the bed file\nind.norel <- rows_along(obj.bed)\n\n# then calculate PCA with specialised function\nobj.svd <- bed_autoSVD(obj.bed, \n\t\t\t\t\t\tind.row = ind.norel, \n\t\t\t\t\t\tk = 30,\n\t\t\t\t\t\tncores = 50,\n\t\t\t\t\t\tmax.iter = 10)\n\n# original code uses nb_cores() to determine number of cores used, but this was too many for running on gallowglass1 - manually changed to 50\n\n# look for outliers \n# using k-nearest neighbors algorithm, this detects outliers that are far from all other points (and is even more outlier if its nearest neighbors are in a very dense cluster)\nprob <- bigutilsr::prob_dist(obj.svd$u, ncores = 50)\nS <- prob$dist.self / sqrt(prob$dist.nn)\n\n# S should be a vector with as many entries as participants \nstr(S)\n\n# plot outlier statistic as histogram to see if there are outliers\nfileName = \"hist_outlier_detection.png\"\n\np = ggplot()+\n\t\tgeom_histogram(aes(S), alpha = 0.5)+\n\t\tscale_x_continuous(breaks = 0:5 /5, limits = c(0, NA))+\n\t\tscale_y_sqrt(breaks = c(10, 100, 500)) +\n\t\ttheme_bigstatsr()+\n\t\tlabs(x = \"Statistics of outlierness (based on KNN)\", y = \"Frequency (sqrt-scale)\")\n\nggsave(filename = fileName, plot = p)\n```\n\n![](images/hist_outlier_detection.png){width=\"400\"}\n\n```{r, eval =F}\n# manually decide on value to use for outlier detection (e.g., 0.6 in Prives example) - there do not seem to be any outliers \nthresh = 0.6\n\n# plot PC scores against one another and highlight individuals to be excluded \nfileName = \"PCs_pre_outlier_detection.png\"\n\np=plot_grid(plotlist = lapply(1:10, function(k){\n\tplot(obj.svd, type = \"scores\", scores = 2 * k - 1:0, coeff = thresh) + \n\taes(colour = S > thresh) +\n\tscale_colour_viridis_d(direction = -1) \n}), scale = 0.95)\n\nggsave(filename = fileName, plot = p)\n```\n\n![](images/PCs_pre_outlier_detection.png){width=\"800\"}\n\n```{r, eval =F}\nsaveRDS(obj.svd, file = \"obj.svd_neuroUKB.RData\", compress = T)\n\n# repeat PCA without outliers \nind.row <- ind.norel[S < thresh] # this should contain particpant IDs that were not outliers so I save this for GWAS input\nsink(file = \"noOutliers.fam\")\ncat(ind.row, \"\\n\")\nsink()\n\nind.col <- attr(obj.svd, \"subset\")\nobj.svd2 <- bed_autoSVD(obj.bed, ind.row = ind.row, \n\t\t\t\t\t\tind.col = ind.col, thr.r2 =NA, \n\t\t\t\t\t\tk = 20, ncores = 50)\n\n# Verification: get scree plot\nfileName = \"Scree_plot.png\"\n\np = plot(obj.svd)\n\nggsave(filename = fileName, plot = p)\n```\n\n![](images/Scree_plot.png){width=\"400\"}\n\n```{r, eval =F}\n# MOST IMPORTANT FIGURE: plot PC loadings against genomic location to see where PCs start picking on LD \n# not sure what the coeff stands for here\nfileName = \"PC_vs_genomic_loc.png\"\n\np <- plot(obj.svd, type = \"loadings\", loadings = 1:30, coeff = 0.4)\n\nggsave(filename = fileName, plot = p, width = 16, height = 16, dpi = 100)\n```\n\n![](images/PC_vs_genomic_loc.png)\n\n```{r, eval =F}\n# plot PC scores against one another\nfileName = \"PC_scores.png\"\n\np = plot(obj.svd, type = \"scores\", scores = 1:30, coeff = 0.4)\n\nggsave(filename = fileName, plot = p, width = 16, height = 16, dpi = 100)\n```\n\n![](images/PC_scores.png)\n\n```{r, eval =F}\n# try to understand the structure of obj.svd and how I can extract genetic PCs from it - goal to save and use as covariates in REGENIE \n# I think this will require predict() \nPCs <- matrix(NA, nrow(obj.bed), ncol(obj.svd$u))\nPCs[ind.row,] <- predict(obj.svd)\n\nPCs <- as.data.frame(PCs)\nnames(PCs) <- paste0(\"PC\", 1:ncol(PCs))\n# get IDs\nPCs$ID <- obj.bed$fam$sample.ID\n\nfileName= \"geneticPCs_neuroUKB.txt\"\nwrite.table(PCs, fileName, col.names = T, row.names = F, quote = F, sep = \"\\t\")\n\n# compare how this relates to 40 PCs previously used\nprev <- data.table::fread(\"UKB_covarGWAS.txt\")\nnames(prev)[1] <- \"ID\"\nnames(prev)[grepl(\"PC\", names(prev))] <- paste0(\"old_\", names(prev)[grepl(\"PC\", names(prev))])\n\n# to save, remove the old\ncols <- names(both)[!grepl(\"old_\", names(both))]\nsave <- both[, cols]\nnames(save)[which(names(save) == \"ID\")] <- \"FID\"\n\n# rearrange\ncols <- c(\"FID\", \"IID\", \"age\", \"sex\", \"assessmentMonth\", \"site\", \"xCoord\", \"yCoord\", \"zCoord\", \"array\", \"batch\", paste0(\"PC\", 1:7))\n\nsave <- save[, cols]\n\ndata.table::fwrite(save, file = \"UKB_covarGWAS_newPCs.txt\", quote = F, col.names = T, row.names = F, sep = \"\\t\")\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":"html","warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"geneticPCs.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.189","theme":"journal","title":"Genetic Principal Components","author":"Anna Elisabeth Furtjes","date":"`r format(Sys.time(), '%d %B %Y')`","doi":"10.1101/2024.11.06.622274"},"extensions":{"book":{"multiFile":true}}}}}